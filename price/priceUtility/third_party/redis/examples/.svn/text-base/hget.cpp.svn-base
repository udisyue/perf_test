#include <iostream>  
#include <boost/date_time.hpp>  
#include "hircluster.h"
#include <malloc.h>

using namespace boost;  
using namespace std;  

const uint16_t MOBILE_MASK  = 0X80;

#pragma pack(push)
#pragma pack(1)
// ota粒度索引版
struct MiniPriceUnit {
    MiniPriceUnit() :
            id(0), price(0) {
    }
    uint16_t id :8;  
    uint32_t price :24; 
    uint32_t total_price :24;
    uint32_t ota_id() const {
        return id & (~MOBILE_MASK);
    }
    bool mobile_only() const {
        return id & MOBILE_MASK;
    }
};

void ParseFromString(char *input, int len) {

    size_t ota_num = len * sizeof(char) / sizeof(MiniPriceUnit);
    cout << endl << "ota_num: " << ota_num << endl;
    for (size_t i = 0; i < ota_num; ++i) {
        MiniPriceUnit mpu;
        memcpy((void*) (&mpu), (void*) (&input[i * sizeof(MiniPriceUnit)]),
                sizeof(MiniPriceUnit));
        cout << "result => [id=" << mpu.id << ", price=" << mpu.price << ", total_price="<< mpu.total_price <<"],";
    }
    cout << endl;
}

#pragma pack(pop)

int main(int argc,char *argv[])  
{ 
    const char *rdsconnection = "192.168.14.170:7000,192.168.14.170:7001,192.168.14.170:7002,192.168.14.170:7003,192.168.14.170:7004,192.168.14.170:7005";
    // const char *rdsconnection = "192.168.232.14:5233,192.168.232.14:5234,192.168.232.15:5233,192.168.232.15:5234,192.168.232.40:5233,192.168.232.40:5234,192.168.232.40:5235";
    redisClusterContext *rds_ctx = redisClusterConnect(rdsconnection, HIRCLUSTER_FLAG_NULL);
    if(rds_ctx == NULL || rds_ctx->err)
    {
        return -1;
    }
    redisReply *rds_reply = NULL;


    std::string hash_name(""), key("");
    if ( argc != 3 ){
        cout << "input param : hash_name ,key" << endl;
        exit(1);
    } else {
        hash_name = argv[1];
        key = argv[2];
        cout << "hashTable => " << hash_name << endl;
        cout << "key => " << key << endl;
    }
 
    const char **p = new const char *[3];
    p[0] = "hget";
    p[1] = hash_name.c_str();
    p[2] = key.c_str();
    size_t *len = new size_t[3];
    len[0] = 4;
    len[1] = hash_name.size();
    len[2] = key.size();
    /*
    const char **p;
    p = (const char **)malloc(3 * sizeof(const char *));
    *p = "hget";
    *(p+1) = hash_name.c_str();
    *(p+2) = key.c_str();
    size_t *len;
    len = (size_t *)malloc(3 * sizeof(size_t));
    *len = 4;
    *(len+1) = hash_name.size();
    *(len+2) = key.size();
    */
    rds_reply = (redisReply *)redisClusterCommandArgv(rds_ctx, 3, p, len);
    // free(p);
    // free(len);
    delete [] p;
    delete len;

    if (rds_reply == NULL){
        cout << "redis err for rds_reply is NULL" << endl;
        exit(1);
    }

    if (rds_reply->type == REDIS_REPLY_STRING
                && rds_reply->len > 0) {
        // TODO 取8个字节
        for (int i = 0; i < rds_reply->len; i++){
            printf("%x ", rds_reply->str[i] & 0xFF);
        } 
        // std::string val(rds_reply->str, rds_reply->len);
        ParseFromString(rds_reply->str, rds_reply->len);
    } else {
        cout << hash_name << "not exists" << endl;
    }
    return 0;  
}  
