// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "price_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace price {

namespace {

const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreditCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreditCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuaranteeAndDeposit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuaranteeAndDeposit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PromotionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PromotionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancellationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancellationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriceItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* BedType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BedType_reflection_ = NULL;
const ::google::protobuf::Descriptor* BedGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BedGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargePrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargePrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* RatePlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RatePlan_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductFilterStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductFilterStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* Product_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Product_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetailOta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetailOta_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetailHotel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetailHotel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListOta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListOta_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListHotel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListHotel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HotelStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BookingStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PromotionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TagType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PayType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChargePriceMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChargePriceType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_price_5ftypes_2eproto() {
  protobuf_AddDesc_price_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "price_types.proto");
  GOOGLE_CHECK(file != NULL);
  UserInfo_descriptor_ = file->message_type(0);
  static const int UserInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, cookie_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, booking_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, order_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, customer_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, activity_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, device_id_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  CreditCard_descriptor_ = file->message_type(1);
  static const int CreditCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditCard, ota_bankcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditCard, elong_bankcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditCard, card_desc_),
  };
  CreditCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreditCard_descriptor_,
      CreditCard::default_instance_,
      CreditCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreditCard));
  GuaranteeAndDeposit_descriptor_ = file->message_type(2);
  static const int GuaranteeAndDeposit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuaranteeAndDeposit, cc_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuaranteeAndDeposit, cvc_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuaranteeAndDeposit, guarantee_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuaranteeAndDeposit, guarantee_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuaranteeAndDeposit, deposit_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuaranteeAndDeposit, deposit_amount_),
  };
  GuaranteeAndDeposit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuaranteeAndDeposit_descriptor_,
      GuaranteeAndDeposit::default_instance_,
      GuaranteeAndDeposit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuaranteeAndDeposit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuaranteeAndDeposit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuaranteeAndDeposit));
  PromotionInfo_descriptor_ = file->message_type(3);
  static const int PromotionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromotionInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromotionInfo, value_),
  };
  PromotionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PromotionInfo_descriptor_,
      PromotionInfo::default_instance_,
      PromotionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromotionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromotionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PromotionInfo));
  Tag_descriptor_ = file->message_type(4);
  static const int Tag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, value_),
  };
  Tag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tag_descriptor_,
      Tag::default_instance_,
      Tag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tag));
  CancellationInfo_descriptor_ = file->message_type(5);
  static const int CancellationInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancellationInfo, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancellationInfo, local_start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancellationInfo, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancellationInfo, local_end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancellationInfo, refundable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancellationInfo, customer_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancellationInfo, supplier_price_),
  };
  CancellationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancellationInfo_descriptor_,
      CancellationInfo::default_instance_,
      CancellationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancellationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancellationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancellationInfo));
  PriceItem_descriptor_ = file->message_type(6);
  static const int PriceItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceItem, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceItem, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceItem, currency_rate_),
  };
  PriceItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceItem_descriptor_,
      PriceItem::default_instance_,
      PriceItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceItem));
  DailyPrice_descriptor_ = file->message_type(7);
  static const int DailyPrice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPrice, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPrice, price_),
  };
  DailyPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyPrice_descriptor_,
      DailyPrice::default_instance_,
      DailyPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyPrice));
  BedType_descriptor_ = file->message_type(8);
  static const int BedType_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BedType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BedType, bed_name_cn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BedType, bed_name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BedType, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BedType, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BedType, is_ambiguous_),
  };
  BedType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BedType_descriptor_,
      BedType::default_instance_,
      BedType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BedType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BedType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BedType));
  BedGroup_descriptor_ = file->message_type(9);
  static const int BedGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BedGroup, bed_type_list_),
  };
  BedGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BedGroup_descriptor_,
      BedGroup::default_instance_,
      BedGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BedGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BedGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BedGroup));
  ChargePrice_descriptor_ = file->message_type(10);
  static const int ChargePrice_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrice, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrice, price_ori_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrice, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrice, included_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrice, charge_price_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrice, charge_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrice, charge_amount_currency_),
  };
  ChargePrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargePrice_descriptor_,
      ChargePrice::default_instance_,
      ChargePrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargePrice));
  BoardInfo_descriptor_ = file->message_type(11);
  static const int BoardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardInfo, included_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardInfo, number_),
  };
  BoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoardInfo_descriptor_,
      BoardInfo::default_instance_,
      BoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoardInfo));
  ImageLink_descriptor_ = file->message_type(12);
  static const int ImageLink_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLink, image_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLink, image_url_),
  };
  ImageLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageLink_descriptor_,
      ImageLink::default_instance_,
      ImageLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageLink));
  ExtraCharge_descriptor_ = file->message_type(13);
  static const int ExtraCharge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraCharge, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraCharge, total_ori_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraCharge, charge_price_list_),
  };
  ExtraCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraCharge_descriptor_,
      ExtraCharge::default_instance_,
      ExtraCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraCharge));
  RatePlan_descriptor_ = file->message_type(14);
  static const int RatePlan_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, is_instant_confirm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, breakfast_included_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, halfboard_included_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, fullboard_included_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, internet_included_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, wifi_included_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, ota_promo_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, pay_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, guarantee_and_deposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, promotion_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, cancellation_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, elong_cancellation_info_list_),
  };
  RatePlan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RatePlan_descriptor_,
      RatePlan::default_instance_,
      RatePlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatePlan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RatePlan));
  ProductDesc_descriptor_ = file->message_type(15);
  static const int ProductDesc_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDesc, board_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDesc, product_bed_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDesc, rate_comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDesc, prepay_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDesc, cancellation_desc_cn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDesc, cancellation_desc_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDesc, product_credit_card_),
  };
  ProductDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductDesc_descriptor_,
      ProductDesc::default_instance_,
      ProductDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductDesc));
  RoomDesc_descriptor_ = file->message_type(16);
  static const int RoomDesc_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDesc, room_desc_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDesc, room_bed_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDesc, image_link_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDesc, internet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDesc, smoking_preferences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDesc, meal_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDesc, room_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDesc, has_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDesc, facility_list_),
  };
  RoomDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomDesc_descriptor_,
      RoomDesc::default_instance_,
      RoomDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomDesc));
  ProductFilter_descriptor_ = file->message_type(17);
  static const int ProductFilter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilter, filter_cancellation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilter, filter_paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilter, filter_internet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilter, filter_boards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilter, filter_beds_),
  };
  ProductFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductFilter_descriptor_,
      ProductFilter::default_instance_,
      ProductFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductFilter));
  ProductFilterStat_descriptor_ = file->message_type(18);
  static const int ProductFilterStat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilterStat, filter_cancellation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilterStat, filter_paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilterStat, filter_internet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilterStat, filter_boards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilterStat, filter_beds_),
  };
  ProductFilterStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductFilterStat_descriptor_,
      ProductFilterStat::default_instance_,
      ProductFilterStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilterStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFilterStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductFilterStat));
  PriceInfo_descriptor_ = file->message_type(19);
  static const int PriceInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, total_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, total_price_ori_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, total_room_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, extra_charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, daily_price_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, average_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, average_room_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, addition_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, sort_price_),
  };
  PriceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceInfo_descriptor_,
      PriceInfo::default_instance_,
      PriceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceInfo));
  PersonHold_descriptor_ = file->message_type(20);
  static const int PersonHold_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonHold, max_person_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonHold, max_adult_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonHold, max_child_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonHold, max_child_age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonHold, min_child_alone_age_),
  };
  PersonHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersonHold_descriptor_,
      PersonHold::default_instance_,
      PersonHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersonHold));
  Product_descriptor_ = file->message_type(21);
  static const int Product_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, elong_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, ota_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, product_name_cn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, product_name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, rateplan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, product_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, room_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, promotion_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, product_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, booking_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, cost_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, origin_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, sale_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, source_ota_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, ota_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, tag_),
  };
  Product_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Product_descriptor_,
      Product::default_instance_,
      Product_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Product));
  Room_descriptor_ = file->message_type(22);
  static const int Room_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, mroom_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, mroom_name_cn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, mroom_name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, room_name_cn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, room_name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, room_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, allotment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, person_hold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, room_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, product_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, base_price_),
  };
  Room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_descriptor_,
      Room::default_instance_,
      Room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room));
  DetailOta_descriptor_ = file->message_type(23);
  static const int DetailOta_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailOta, base_hotel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailOta, crawl_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailOta, base_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailOta, promotion_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailOta, ota_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailOta, ota_hotel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailOta, hotel_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailOta, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailOta, room_list_),
  };
  DetailOta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetailOta_descriptor_,
      DetailOta::default_instance_,
      DetailOta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailOta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailOta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetailOta));
  DetailHotel_descriptor_ = file->message_type(24);
  static const int DetailHotel_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailHotel, base_hotel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailHotel, crawl_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailHotel, promotion_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailHotel, product_filter_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailHotel, base_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailHotel, detail_ota_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailHotel, tag_),
  };
  DetailHotel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetailHotel_descriptor_,
      DetailHotel::default_instance_,
      DetailHotel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailHotel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailHotel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetailHotel));
  ListOta_descriptor_ = file->message_type(25);
  static const int ListOta_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOta, base_hotel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOta, crawl_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOta, ota_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOta, origin_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOta, sale_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOta, promotion_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOta, pay_type_),
  };
  ListOta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListOta_descriptor_,
      ListOta::default_instance_,
      ListOta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListOta));
  ListHotel_descriptor_ = file->message_type(26);
  static const int ListHotel_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListHotel, base_hotel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListHotel, crawl_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListHotel, booking_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListHotel, promotion_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListHotel, list_ota_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListHotel, mobile_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListHotel, tag_),
  };
  ListHotel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListHotel_descriptor_,
      ListHotel::default_instance_,
      ListHotel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListHotel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListHotel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListHotel));
  RequestType_descriptor_ = file->enum_type(0);
  HotelStatus_descriptor_ = file->enum_type(1);
  BookingStatus_descriptor_ = file->enum_type(2);
  PromotionType_descriptor_ = file->enum_type(3);
  TagType_descriptor_ = file->enum_type(4);
  PayType_descriptor_ = file->enum_type(5);
  ChargePriceMode_descriptor_ = file->enum_type(6);
  ChargePriceType_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_price_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreditCard_descriptor_, &CreditCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuaranteeAndDeposit_descriptor_, &GuaranteeAndDeposit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PromotionInfo_descriptor_, &PromotionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tag_descriptor_, &Tag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancellationInfo_descriptor_, &CancellationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceItem_descriptor_, &PriceItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyPrice_descriptor_, &DailyPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BedType_descriptor_, &BedType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BedGroup_descriptor_, &BedGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargePrice_descriptor_, &ChargePrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoardInfo_descriptor_, &BoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageLink_descriptor_, &ImageLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraCharge_descriptor_, &ExtraCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RatePlan_descriptor_, &RatePlan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductDesc_descriptor_, &ProductDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomDesc_descriptor_, &RoomDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductFilter_descriptor_, &ProductFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductFilterStat_descriptor_, &ProductFilterStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceInfo_descriptor_, &PriceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersonHold_descriptor_, &PersonHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Product_descriptor_, &Product::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_descriptor_, &Room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetailOta_descriptor_, &DetailOta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetailHotel_descriptor_, &DetailHotel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListOta_descriptor_, &ListOta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListHotel_descriptor_, &ListHotel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_price_5ftypes_2eproto() {
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete CreditCard::default_instance_;
  delete CreditCard_reflection_;
  delete GuaranteeAndDeposit::default_instance_;
  delete GuaranteeAndDeposit_reflection_;
  delete PromotionInfo::default_instance_;
  delete PromotionInfo_reflection_;
  delete Tag::default_instance_;
  delete Tag_reflection_;
  delete CancellationInfo::default_instance_;
  delete CancellationInfo_reflection_;
  delete PriceItem::default_instance_;
  delete PriceItem_reflection_;
  delete DailyPrice::default_instance_;
  delete DailyPrice_reflection_;
  delete BedType::default_instance_;
  delete BedType_reflection_;
  delete BedGroup::default_instance_;
  delete BedGroup_reflection_;
  delete ChargePrice::default_instance_;
  delete ChargePrice_reflection_;
  delete BoardInfo::default_instance_;
  delete BoardInfo_reflection_;
  delete ImageLink::default_instance_;
  delete ImageLink_reflection_;
  delete ExtraCharge::default_instance_;
  delete ExtraCharge_reflection_;
  delete RatePlan::default_instance_;
  delete RatePlan_reflection_;
  delete ProductDesc::default_instance_;
  delete ProductDesc_reflection_;
  delete RoomDesc::default_instance_;
  delete RoomDesc_reflection_;
  delete ProductFilter::default_instance_;
  delete ProductFilter_reflection_;
  delete ProductFilterStat::default_instance_;
  delete ProductFilterStat_reflection_;
  delete PriceInfo::default_instance_;
  delete PriceInfo_reflection_;
  delete PersonHold::default_instance_;
  delete PersonHold_reflection_;
  delete Product::default_instance_;
  delete Product_reflection_;
  delete Room::default_instance_;
  delete Room_reflection_;
  delete DetailOta::default_instance_;
  delete DetailOta_reflection_;
  delete DetailHotel::default_instance_;
  delete DetailHotel_reflection_;
  delete ListOta::default_instance_;
  delete ListOta_reflection_;
  delete ListHotel::default_instance_;
  delete ListHotel_reflection_;
}

void protobuf_AddDesc_price_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021price_types.proto\022\005price\"\331\001\n\010UserInfo\022"
    "\017\n\007user_ip\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\022\021\n\t"
    "cookie_id\030\003 \001(\t\022\022\n\nuser_agent\030\004 \001(\t\022\027\n\017b"
    "ooking_channel\030\005 \001(\005\022\022\n\norder_from\030\006 \001(\005"
    "\022\026\n\016customer_level\030\007 \001(\005\022\030\n\020activity_id_"
    "list\030\010 \003(\005\022\017\n\007user_id\030\t \001(\t\022\021\n\tdevice_id"
    "\030\n \001(\t\"M\n\nCreditCard\022\024\n\014ota_bankcode\030\001 \001"
    "(\t\022\026\n\016elong_bankcode\030\002 \001(\t\022\021\n\tcard_desc\030"
    "\003 \001(\014\"\350\001\n\023GuaranteeAndDeposit\022\032\n\013cc_requ"
    "ired\030\001 \001(\010:\005false\022\033\n\014cvc_required\030\002 \001(\010:"
    "\005false\022!\n\022guarantee_required\030\003 \001(\010:\005fals"
    "e\022*\n\020guarantee_amount\030\004 \001(\0132\020.price.Pric"
    "eItem\022\037\n\020deposit_required\030\005 \001(\010:\005false\022("
    "\n\016deposit_amount\030\006 \001(\0132\020.price.PriceItem"
    "\"B\n\rPromotionInfo\022\"\n\004type\030\001 \001(\0162\024.price."
    "PromotionType\022\r\n\005value\030\002 \001(\t\"2\n\003Tag\022\034\n\004t"
    "ype\030\001 \001(\0162\016.price.TagType\022\r\n\005value\030\002 \001(\t"
    "\"\322\001\n\020CancellationInfo\022\022\n\nstart_date\030\001 \001("
    "\t\022\030\n\020local_start_date\030\002 \001(\t\022\020\n\010end_date\030"
    "\003 \001(\t\022\026\n\016local_end_date\030\004 \001(\t\022\022\n\nrefunda"
    "ble\030\005 \001(\t\022(\n\016customer_price\030\006 \001(\0132\020.pric"
    "e.PriceItem\022(\n\016supplier_price\030\007 \001(\0132\020.pr"
    "ice.PriceItem\"L\n\tPriceItem\022\016\n\006amount\030\001 \002"
    "(\003\022\025\n\010currency\030\002 \002(\t:\003CNY\022\030\n\rcurrency_ra"
    "te\030\003 \001(\001:\0011\";\n\nDailyPrice\022\014\n\004date\030\001 \001(\t\022"
    "\037\n\005price\030\002 \001(\0132\020.price.PriceItem\"v\n\007BedT"
    "ype\022\n\n\002id\030\001 \002(\t\022\023\n\013bed_name_cn\030\002 \002(\014\022\023\n\013"
    "bed_name_en\030\003 \001(\014\022\013\n\003num\030\004 \001(\005\022\014\n\004size\030\005"
    " \001(\014\022\032\n\014is_ambiguous\030\006 \001(\010:\004true\"1\n\010BedG"
    "roup\022%\n\rbed_type_list\030\001 \003(\0132\016.price.BedT"
    "ype\"\231\002\n\013ChargePrice\022\037\n\005price\030\001 \002(\0132\020.pri"
    "ce.PriceItem\022#\n\tprice_ori\030\002 \001(\0132\020.price."
    "PriceItem\022\023\n\013description\030\003 \002(\014\022-\n\004type\030\004"
    " \001(\0162\026.price.ChargePriceType:\007UNKNOWN\022\026\n"
    "\010included\030\005 \001(\010:\004true\0221\n\021charge_price_mo"
    "de\030\006 \001(\0162\026.price.ChargePriceMode\022\025\n\rchar"
    "ge_amount\030\007 \001(\t\022\036\n\026charge_amount_currenc"
    "y\030\010 \001(\t\"B\n\tBoardInfo\022\020\n\010included\030\001 \002(\010\022\023"
    "\n\013description\030\002 \001(\014\022\016\n\006number\030\003 \001(\005\"0\n\tI"
    "mageLink\022\020\n\010image_id\030\001 \001(\t\022\021\n\timage_url\030"
    "\002 \001(\t\"\202\001\n\013ExtraCharge\022\037\n\005total\030\001 \002(\0132\020.p"
    "rice.PriceItem\022#\n\ttotal_ori\030\002 \002(\0132\020.pric"
    "e.PriceItem\022-\n\021charge_price_list\030\003 \003(\0132\022"
    ".price.ChargePrice\"\242\004\n\010RatePlan\022 \n\022is_in"
    "stant_confirm\030\001 \001(\010:\004true\022!\n\022breakfast_i"
    "ncluded\030\002 \001(\010:\005false\022!\n\022halfboard_includ"
    "ed\030\003 \001(\010:\005false\022!\n\022fullboard_included\030\004 "
    "\001(\010:\005false\022 \n\021internet_included\030\005 \001(\010:\005f"
    "alse\022\034\n\rwifi_included\030\006 \001(\010:\005false\022\026\n\016ot"
    "a_promo_type\030\007 \001(\005\022\"\n\tuser_info\030\010 \001(\0132\017."
    "price.UserInfo\022)\n\010pay_type\030\t \001(\0162\016.price"
    ".PayType:\007PRE_PAY\0229\n\025guarantee_and_depos"
    "it\030\n \001(\0132\032.price.GuaranteeAndDeposit\0221\n\023"
    "promotion_info_list\030\013 \003(\0132\024.price.Promot"
    "ionInfo\0227\n\026cancellation_info_list\030\014 \003(\0132"
    "\027.price.CancellationInfo\022=\n\034elong_cancel"
    "lation_info_list\030\r \003(\0132\027.price.Cancellat"
    "ionInfo\"\373\001\n\013ProductDesc\022)\n\017board_info_li"
    "st\030\001 \003(\0132\020.price.BoardInfo\022*\n\021product_be"
    "d_group\030\002 \003(\0132\017.price.BedGroup\022\024\n\014rate_c"
    "omment\030\003 \001(\014\022\023\n\013prepay_desc\030\004 \001(\014\022\034\n\024can"
    "cellation_desc_cn\030\005 \001(\014\022\034\n\024cancellation_"
    "desc_en\030\006 \001(\014\022.\n\023product_credit_card\030\007 \003"
    "(\0132\021.price.CreditCard\"\371\001\n\010RoomDesc\022\026\n\016ro"
    "om_desc_text\030\001 \001(\014\022\'\n\016room_bed_group\030\002 \003"
    "(\0132\017.price.BedGroup\022)\n\017image_link_list\030\003"
    " \003(\0132\020.price.ImageLink\022\020\n\010internet\030\004 \001(\014"
    "\022\033\n\023smoking_preferences\030\005 \001(\014\022\021\n\tmeal_de"
    "sc\030\006 \001(\014\022\021\n\troom_size\030\007 \001(\014\022\025\n\nhas_windo"
    "w\030\010 \001(\005:\0012\022\025\n\rfacility_list\030\n \003(\014\"\216\001\n\rPr"
    "oductFilter\022 \n\030filter_cancellation_type\030"
    "\001 \001(\005\022\026\n\016filter_paytype\030\002 \001(\005\022\027\n\017filter_"
    "internet\030\003 \001(\005\022\025\n\rfilter_boards\030\004 \001(\005\022\023\n"
    "\013filter_beds\030\005 \003(\005\"\222\001\n\021ProductFilterStat"
    "\022 \n\030filter_cancellation_type\030\001 \003(\005\022\026\n\016fi"
    "lter_paytype\030\002 \003(\005\022\027\n\017filter_internet\030\003 "
    "\003(\005\022\025\n\rfilter_boards\030\004 \003(\005\022\023\n\013filter_bed"
    "s\030\005 \003(\005\"\207\003\n\tPriceInfo\022%\n\013total_price\030\001 \001"
    "(\0132\020.price.PriceItem\022)\n\017total_price_ori\030"
    "\002 \001(\0132\020.price.PriceItem\022*\n\020total_room_pr"
    "ice\030\003 \001(\0132\020.price.PriceItem\022(\n\014extra_cha"
    "rge\030\004 \001(\0132\022.price.ExtraCharge\022+\n\020daily_p"
    "rice_list\030\005 \003(\0132\021.price.DailyPrice\022\'\n\rav"
    "erage_price\030\006 \001(\0132\020.price.PriceItem\022,\n\022a"
    "verage_room_price\030\007 \001(\0132\020.price.PriceIte"
    "m\022(\n\016addition_price\030\010 \001(\0132\020.price.PriceI"
    "tem\022$\n\nsort_price\030\t \001(\0132\020.price.PriceIte"
    "m\"\206\001\n\nPersonHold\022\026\n\016max_person_num\030\001 \002(\005"
    "\022\025\n\rmax_adult_num\030\002 \001(\005\022\025\n\rmax_child_num"
    "\030\003 \001(\005\022\025\n\rmax_child_age\030\004 \001(\005\022\033\n\023min_chi"
    "ld_alone_age\030\005 \001(\005\"\221\004\n\007Product\022\021\n\telong_"
    "pid\030\001 \002(\003\022\017\n\007ota_pid\030\003 \001(\t\022\027\n\017product_na"
    "me_cn\030\004 \001(\014\022\027\n\017product_name_en\030\005 \001(\014\022!\n\010"
    "rateplan\030\006 \001(\0132\017.price.RatePlan\022(\n\014produ"
    "ct_desc\030\010 \001(\0132\022.price.ProductDesc\022\020\n\010roo"
    "m_num\030\t \002(\005\022,\n\016promotion_info\030\n \003(\0132\024.pr"
    "ice.PromotionInfo\022,\n\016product_filter\030\013 \001("
    "\0132\024.price.ProductFilter\022\022\n\nattachment\030\014 "
    "\001(\t\022\'\n\rbooking_price\030\024 \001(\0132\020.price.Price"
    "Info\022$\n\ncost_price\030\025 \001(\0132\020.price.PriceIn"
    "fo\022&\n\014origin_price\030\026 \001(\0132\020.price.PriceIn"
    "fo\022$\n\nsale_price\030\027 \001(\0132\020.price.PriceInfo"
    "\022\031\n\rsource_ota_id\0302 \001(\005:\002-1\022\020\n\010ota_sign\030"
    "3 \001(\003\022\027\n\003tag\030\030 \003(\0132\n.price.Tag\"\333\002\n\004Room\022"
    "\020\n\010mroom_id\030\001 \001(\003\022\025\n\rmroom_name_cn\030\002 \001(\014"
    "\022\025\n\rmroom_name_en\030\003 \001(\014\022\017\n\007room_id\030\004 \002(\003"
    "\022\024\n\014room_name_cn\030\005 \002(\014\022\024\n\014room_name_en\030\006"
    " \001(\014\022\023\n\013room_status\030\007 \002(\005\022\025\n\tallotment\030\010"
    " \001(\005:\002-1\022&\n\013person_hold\030\t \001(\0132\021.price.Pe"
    "rsonHold\022\"\n\troom_desc\030\n \001(\0132\017.price.Room"
    "Desc\022\022\n\nattachment\030\013 \001(\t\022$\n\014product_list"
    "\030\014 \003(\0132\016.price.Product\022$\n\nbase_price\030\025 \001"
    "(\0132\020.price.PriceInfo\"\216\002\n\tDetailOta\022\025\n\rba"
    "se_hotel_id\030\001 \002(\005\022\022\n\ncrawl_time\030\002 \001(\003\022$\n"
    "\nbase_price\030\003 \001(\0132\020.price.PriceInfo\022,\n\016p"
    "romotion_info\030\004 \003(\0132\024.price.PromotionInf"
    "o\022\016\n\006ota_id\030\013 \002(\005\022\024\n\014ota_hotel_id\030\014 \001(\t\022"
    "(\n\014hotel_status\030\r \002(\0162\022.price.HotelStatu"
    "s\022\022\n\nattachment\030\016 \001(\t\022\036\n\troom_list\030\017 \003(\013"
    "2\013.price.Room\"\207\002\n\013DetailHotel\022\025\n\rbase_ho"
    "tel_id\030\001 \002(\005\022\022\n\ncrawl_time\030\002 \001(\003\022,\n\016prom"
    "otion_info\030\004 \003(\0132\024.price.PromotionInfo\0225"
    "\n\023product_filter_stat\030\005 \001(\0132\030.price.Prod"
    "uctFilterStat\022$\n\nbase_price\030\003 \001(\0132\020.pric"
    "e.PriceInfo\022)\n\017detail_ota_list\030\013 \003(\0132\020.p"
    "rice.DetailOta\022\027\n\003tag\030\014 \003(\0132\n.price.Tag\""
    "\353\001\n\007ListOta\022\025\n\rbase_hotel_id\030\001 \001(\005\022\022\n\ncr"
    "awl_time\030\002 \001(\003\022\016\n\006ota_id\030\003 \002(\005\022&\n\014origin"
    "_price\030\004 \001(\0132\020.price.PriceInfo\022$\n\nsale_p"
    "rice\030\005 \001(\0132\020.price.PriceInfo\022,\n\016promotio"
    "n_info\030\006 \003(\0132\024.price.PromotionInfo\022)\n\010pa"
    "y_type\030\007 \001(\0162\016.price.PayType:\007PRE_PAY\"\356\001"
    "\n\tListHotel\022\025\n\rbase_hotel_id\030\001 \002(\005\022\022\n\ncr"
    "awl_time\030\002 \001(\003\022,\n\016booking_status\030\004 \001(\0162\024"
    ".price.BookingStatus\022,\n\016promotion_info\030\005"
    " \003(\0132\024.price.PromotionInfo\022%\n\rlist_ota_l"
    "ist\030\006 \003(\0132\016.price.ListOta\022\032\n\013mobile_only"
    "\030\007 \001(\010:\005false\022\027\n\003tag\030\014 \003(\0132\n.price.Tag*1"
    "\n\013RequestType\022\n\n\006NORMAL\020\001\022\t\n\005CACHE\020\002\022\013\n\007"
    "CRAWLER\020\003*A\n\013HotelStatus\022\n\n\006FAILED\020\001\022\021\n\r"
    "SUCCESS_STOCK\020\002\022\023\n\017SUCCESS_SOLDOUT\020\003*3\n\r"
    "BookingStatus\022\020\n\014BOOKING_FAIL\020\001\022\020\n\014BOOKI"
    "NG_SUCC\020\002*\201\003\n\rPromotionType\022\r\n\tSCORECARD"
    "\020\001\022\014\n\010CASHBACK\020\002\022\014\n\010GIFTCARD\020\003\022\014\n\010DISCOU"
    "NT\020\004\022\023\n\017CHINESESUPERIOR\020\005\022\n\n\006COUPON\020\006\022\025\n"
    "\021AVAIL_COUPON_LIST\020\007\022\010\n\004GIFT\020\010\022\017\n\013MOBILE"
    "_ONLY\020\t\022\027\n\023AVAIL_DISCOUNT_LIST\020\n\022\021\n\rOTA_"
    "SCORECARD\020e\022\020\n\014OTA_CASHBACK\020f\022\020\n\014OTA_GIF"
    "TCARD\020g\022\020\n\014OTA_DISCOUNT\020h\022\027\n\023OTA_CHINESE"
    "SUPERIOR\020i\022\016\n\nOTA_COUPON\020j\022\031\n\025OTA_AVAIL_"
    "COUPON_LIST\020k\022\014\n\010OTA_GIFT\020l\022\023\n\017OTA_MOBIL"
    "E_ONLY\020m\022\033\n\027OTA_AVAIL_DISCOUNT_LIST\020n*\310\001"
    "\n\007TagType\022\025\n\021C_BOOKINGRATE_TAG\020e\022\017\n\013C_TO"
    "PIC_TAG\020f\022\020\n\014C_ADCARD_TAG\020g\022\021\n\014H_REVIEW_"
    "TAG\020\311\001\022\020\n\013H_PRICE_TAG\020\312\001\022\021\n\014H_ADCARD_TAG"
    "\020\313\001\022\022\n\rP_QUALITY_TAG\020\255\002\022\020\n\013P_PRICE_TAG\020\256"
    "\002\022\021\n\014P_ADCARD_TAG\020\257\002\022\022\n\rP_CONFIRM_TAG\020\260\002"
    "*$\n\007PayType\022\013\n\007PRE_PAY\020\001\022\014\n\010CASH_PAY\020\002*\241"
    "\002\n\017ChargePriceMode\022\022\n\016NO_SUCH_CHARGE\020\000\022\026"
    "\n\022CHARGE_IS_PER_STAY\020\001\022!\n\035CHARGE_IS_PER_"
    "PERSON_PER_STAY\020\002\022\027\n\023CHARGE_IS_PER_NIGHT"
    "\020\003\022$\n CHARGE_IS_PER_PERSON_AND_NIGHT_0\020\004"
    "\022\032\n\026CHARGE_IS_A_PERCENTAGE\020\005\022$\n CHARGE_I"
    "S_PER_PERSON_AND_NIGHT_1\020\006\022\032\n\026CHARGE_IS_"
    "INCALCULABLE\020\007\022\"\n\036CHARGE_IS_INCALCULABLE"
    "_Croatia\020\010*H\n\017ChargePriceType\022\013\n\007UNKNOWN"
    "\020\000\022\024\n\020TAXANDSERVICEFEE\020\001\022\022\n\016EXTRAPERSONF"
    "EE\020\002B\006\200\001\001\220\001\001", 6692);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "price_types.proto", &protobuf_RegisterTypes);
  UserInfo::default_instance_ = new UserInfo();
  CreditCard::default_instance_ = new CreditCard();
  GuaranteeAndDeposit::default_instance_ = new GuaranteeAndDeposit();
  PromotionInfo::default_instance_ = new PromotionInfo();
  Tag::default_instance_ = new Tag();
  CancellationInfo::default_instance_ = new CancellationInfo();
  PriceItem::default_instance_ = new PriceItem();
  DailyPrice::default_instance_ = new DailyPrice();
  BedType::default_instance_ = new BedType();
  BedGroup::default_instance_ = new BedGroup();
  ChargePrice::default_instance_ = new ChargePrice();
  BoardInfo::default_instance_ = new BoardInfo();
  ImageLink::default_instance_ = new ImageLink();
  ExtraCharge::default_instance_ = new ExtraCharge();
  RatePlan::default_instance_ = new RatePlan();
  ProductDesc::default_instance_ = new ProductDesc();
  RoomDesc::default_instance_ = new RoomDesc();
  ProductFilter::default_instance_ = new ProductFilter();
  ProductFilterStat::default_instance_ = new ProductFilterStat();
  PriceInfo::default_instance_ = new PriceInfo();
  PersonHold::default_instance_ = new PersonHold();
  Product::default_instance_ = new Product();
  Room::default_instance_ = new Room();
  DetailOta::default_instance_ = new DetailOta();
  DetailHotel::default_instance_ = new DetailHotel();
  ListOta::default_instance_ = new ListOta();
  ListHotel::default_instance_ = new ListHotel();
  UserInfo::default_instance_->InitAsDefaultInstance();
  CreditCard::default_instance_->InitAsDefaultInstance();
  GuaranteeAndDeposit::default_instance_->InitAsDefaultInstance();
  PromotionInfo::default_instance_->InitAsDefaultInstance();
  Tag::default_instance_->InitAsDefaultInstance();
  CancellationInfo::default_instance_->InitAsDefaultInstance();
  PriceItem::default_instance_->InitAsDefaultInstance();
  DailyPrice::default_instance_->InitAsDefaultInstance();
  BedType::default_instance_->InitAsDefaultInstance();
  BedGroup::default_instance_->InitAsDefaultInstance();
  ChargePrice::default_instance_->InitAsDefaultInstance();
  BoardInfo::default_instance_->InitAsDefaultInstance();
  ImageLink::default_instance_->InitAsDefaultInstance();
  ExtraCharge::default_instance_->InitAsDefaultInstance();
  RatePlan::default_instance_->InitAsDefaultInstance();
  ProductDesc::default_instance_->InitAsDefaultInstance();
  RoomDesc::default_instance_->InitAsDefaultInstance();
  ProductFilter::default_instance_->InitAsDefaultInstance();
  ProductFilterStat::default_instance_->InitAsDefaultInstance();
  PriceInfo::default_instance_->InitAsDefaultInstance();
  PersonHold::default_instance_->InitAsDefaultInstance();
  Product::default_instance_->InitAsDefaultInstance();
  Room::default_instance_->InitAsDefaultInstance();
  DetailOta::default_instance_->InitAsDefaultInstance();
  DetailHotel::default_instance_->InitAsDefaultInstance();
  ListOta::default_instance_->InitAsDefaultInstance();
  ListHotel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_price_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_price_5ftypes_2eproto {
  StaticDescriptorInitializer_price_5ftypes_2eproto() {
    protobuf_AddDesc_price_5ftypes_2eproto();
  }
} static_descriptor_initializer_price_5ftypes_2eproto_;

const ::google::protobuf::EnumDescriptor* RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestType_descriptor_;
}
bool RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HotelStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotelStatus_descriptor_;
}
bool HotelStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BookingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BookingStatus_descriptor_;
}
bool BookingStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PromotionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PromotionType_descriptor_;
}
bool PromotionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TagType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagType_descriptor_;
}
bool TagType_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 201:
    case 202:
    case 203:
    case 301:
    case 302:
    case 303:
    case 304:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PayType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayType_descriptor_;
}
bool PayType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChargePriceMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargePriceMode_descriptor_;
}
bool ChargePriceMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChargePriceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargePriceType_descriptor_;
}
bool ChargePriceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kUserIpFieldNumber;
const int UserInfo::kSessionIdFieldNumber;
const int UserInfo::kCookieIdFieldNumber;
const int UserInfo::kUserAgentFieldNumber;
const int UserInfo::kBookingChannelFieldNumber;
const int UserInfo::kOrderFromFieldNumber;
const int UserInfo::kCustomerLevelFieldNumber;
const int UserInfo::kActivityIdListFieldNumber;
const int UserInfo::kUserIdFieldNumber;
const int UserInfo::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cookie_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  booking_channel_ = 0;
  order_from_ = 0;
  customer_level_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (user_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete user_ip_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (cookie_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_id_;
  }
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_ip()) {
      if (user_ip_ != &::google::protobuf::internal::kEmptyString) {
        user_ip_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_cookie_id()) {
      if (cookie_id_ != &::google::protobuf::internal::kEmptyString) {
        cookie_id_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
        user_agent_->clear();
      }
    }
    booking_channel_ = 0;
    order_from_ = 0;
    customer_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  activity_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_ip().data(), this->user_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cookie_id;
        break;
      }
      
      // optional string cookie_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cookie_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie_id().data(), this->cookie_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_agent;
        break;
      }
      
      // optional string user_agent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_booking_channel;
        break;
      }
      
      // optional int32 booking_channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_booking_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &booking_channel_)));
          set_has_booking_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_order_from;
        break;
      }
      
      // optional int32 order_from = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_from_)));
          set_has_order_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_customer_level;
        break;
      }
      
      // optional int32 customer_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_customer_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customer_level_)));
          set_has_customer_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_activity_id_list;
        break;
      }
      
      // repeated int32 activity_id_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_activity_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_activity_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_activity_id_list;
        if (input->ExpectTag(74)) goto parse_user_id;
        break;
      }
      
      // optional string user_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_device_id;
        break;
      }
      
      // optional string device_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_ip = 1;
  if (has_user_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_ip().data(), this->user_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_ip(), output);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }
  
  // optional string cookie_id = 3;
  if (has_cookie_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie_id().data(), this->cookie_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cookie_id(), output);
  }
  
  // optional string user_agent = 4;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_agent(), output);
  }
  
  // optional int32 booking_channel = 5;
  if (has_booking_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->booking_channel(), output);
  }
  
  // optional int32 order_from = 6;
  if (has_order_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->order_from(), output);
  }
  
  // optional int32 customer_level = 7;
  if (has_customer_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->customer_level(), output);
  }
  
  // repeated int32 activity_id_list = 8;
  for (int i = 0; i < this->activity_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->activity_id_list(i), output);
  }
  
  // optional string user_id = 9;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->user_id(), output);
  }
  
  // optional string device_id = 10;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->device_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_ip = 1;
  if (has_user_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_ip().data(), this->user_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_ip(), target);
  }
  
  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }
  
  // optional string cookie_id = 3;
  if (has_cookie_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie_id().data(), this->cookie_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cookie_id(), target);
  }
  
  // optional string user_agent = 4;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_agent(), target);
  }
  
  // optional int32 booking_channel = 5;
  if (has_booking_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->booking_channel(), target);
  }
  
  // optional int32 order_from = 6;
  if (has_order_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->order_from(), target);
  }
  
  // optional int32 customer_level = 7;
  if (has_customer_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->customer_level(), target);
  }
  
  // repeated int32 activity_id_list = 8;
  for (int i = 0; i < this->activity_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->activity_id_list(i), target);
  }
  
  // optional string user_id = 9;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->user_id(), target);
  }
  
  // optional string device_id = 10;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_ip = 1;
    if (has_user_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_ip());
    }
    
    // optional string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional string cookie_id = 3;
    if (has_cookie_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie_id());
    }
    
    // optional string user_agent = 4;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }
    
    // optional int32 booking_channel = 5;
    if (has_booking_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->booking_channel());
    }
    
    // optional int32 order_from = 6;
    if (has_order_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_from());
    }
    
    // optional int32 customer_level = 7;
    if (has_customer_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customer_level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string user_id = 9;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // optional string device_id = 10;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }
    
  }
  // repeated int32 activity_id_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->activity_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->activity_id_list(i));
    }
    total_size += 1 * this->activity_id_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  activity_id_list_.MergeFrom(from.activity_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_ip()) {
      set_user_ip(from.user_ip());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_cookie_id()) {
      set_cookie_id(from.cookie_id());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
    if (from.has_booking_channel()) {
      set_booking_channel(from.booking_channel());
    }
    if (from.has_order_from()) {
      set_order_from(from.order_from());
    }
    if (from.has_customer_level()) {
      set_customer_level(from.customer_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(user_ip_, other->user_ip_);
    std::swap(session_id_, other->session_id_);
    std::swap(cookie_id_, other->cookie_id_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(booking_channel_, other->booking_channel_);
    std::swap(order_from_, other->order_from_);
    std::swap(customer_level_, other->customer_level_);
    activity_id_list_.Swap(&other->activity_id_list_);
    std::swap(user_id_, other->user_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreditCard::kOtaBankcodeFieldNumber;
const int CreditCard::kElongBankcodeFieldNumber;
const int CreditCard::kCardDescFieldNumber;
#endif  // !_MSC_VER

CreditCard::CreditCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreditCard::InitAsDefaultInstance() {
}

CreditCard::CreditCard(const CreditCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreditCard::SharedCtor() {
  _cached_size_ = 0;
  ota_bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  elong_bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreditCard::~CreditCard() {
  SharedDtor();
}

void CreditCard::SharedDtor() {
  if (ota_bankcode_ != &::google::protobuf::internal::kEmptyString) {
    delete ota_bankcode_;
  }
  if (elong_bankcode_ != &::google::protobuf::internal::kEmptyString) {
    delete elong_bankcode_;
  }
  if (card_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete card_desc_;
  }
  if (this != default_instance_) {
  }
}

void CreditCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreditCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreditCard_descriptor_;
}

const CreditCard& CreditCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

CreditCard* CreditCard::default_instance_ = NULL;

CreditCard* CreditCard::New() const {
  return new CreditCard;
}

void CreditCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ota_bankcode()) {
      if (ota_bankcode_ != &::google::protobuf::internal::kEmptyString) {
        ota_bankcode_->clear();
      }
    }
    if (has_elong_bankcode()) {
      if (elong_bankcode_ != &::google::protobuf::internal::kEmptyString) {
        elong_bankcode_->clear();
      }
    }
    if (has_card_desc()) {
      if (card_desc_ != &::google::protobuf::internal::kEmptyString) {
        card_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreditCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ota_bankcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ota_bankcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ota_bankcode().data(), this->ota_bankcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_elong_bankcode;
        break;
      }
      
      // optional string elong_bankcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elong_bankcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_elong_bankcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->elong_bankcode().data(), this->elong_bankcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_desc;
        break;
      }
      
      // optional bytes card_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_card_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreditCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ota_bankcode = 1;
  if (has_ota_bankcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ota_bankcode().data(), this->ota_bankcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ota_bankcode(), output);
  }
  
  // optional string elong_bankcode = 2;
  if (has_elong_bankcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elong_bankcode().data(), this->elong_bankcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->elong_bankcode(), output);
  }
  
  // optional bytes card_desc = 3;
  if (has_card_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->card_desc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreditCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ota_bankcode = 1;
  if (has_ota_bankcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ota_bankcode().data(), this->ota_bankcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ota_bankcode(), target);
  }
  
  // optional string elong_bankcode = 2;
  if (has_elong_bankcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elong_bankcode().data(), this->elong_bankcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->elong_bankcode(), target);
  }
  
  // optional bytes card_desc = 3;
  if (has_card_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->card_desc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreditCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ota_bankcode = 1;
    if (has_ota_bankcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ota_bankcode());
    }
    
    // optional string elong_bankcode = 2;
    if (has_elong_bankcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->elong_bankcode());
    }
    
    // optional bytes card_desc = 3;
    if (has_card_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->card_desc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreditCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreditCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreditCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreditCard::MergeFrom(const CreditCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ota_bankcode()) {
      set_ota_bankcode(from.ota_bankcode());
    }
    if (from.has_elong_bankcode()) {
      set_elong_bankcode(from.elong_bankcode());
    }
    if (from.has_card_desc()) {
      set_card_desc(from.card_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreditCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreditCard::CopyFrom(const CreditCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreditCard::IsInitialized() const {
  
  return true;
}

void CreditCard::Swap(CreditCard* other) {
  if (other != this) {
    std::swap(ota_bankcode_, other->ota_bankcode_);
    std::swap(elong_bankcode_, other->elong_bankcode_);
    std::swap(card_desc_, other->card_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreditCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreditCard_descriptor_;
  metadata.reflection = CreditCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuaranteeAndDeposit::kCcRequiredFieldNumber;
const int GuaranteeAndDeposit::kCvcRequiredFieldNumber;
const int GuaranteeAndDeposit::kGuaranteeRequiredFieldNumber;
const int GuaranteeAndDeposit::kGuaranteeAmountFieldNumber;
const int GuaranteeAndDeposit::kDepositRequiredFieldNumber;
const int GuaranteeAndDeposit::kDepositAmountFieldNumber;
#endif  // !_MSC_VER

GuaranteeAndDeposit::GuaranteeAndDeposit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuaranteeAndDeposit::InitAsDefaultInstance() {
  guarantee_amount_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
  deposit_amount_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
}

GuaranteeAndDeposit::GuaranteeAndDeposit(const GuaranteeAndDeposit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuaranteeAndDeposit::SharedCtor() {
  _cached_size_ = 0;
  cc_required_ = false;
  cvc_required_ = false;
  guarantee_required_ = false;
  guarantee_amount_ = NULL;
  deposit_required_ = false;
  deposit_amount_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuaranteeAndDeposit::~GuaranteeAndDeposit() {
  SharedDtor();
}

void GuaranteeAndDeposit::SharedDtor() {
  if (this != default_instance_) {
    delete guarantee_amount_;
    delete deposit_amount_;
  }
}

void GuaranteeAndDeposit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuaranteeAndDeposit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuaranteeAndDeposit_descriptor_;
}

const GuaranteeAndDeposit& GuaranteeAndDeposit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

GuaranteeAndDeposit* GuaranteeAndDeposit::default_instance_ = NULL;

GuaranteeAndDeposit* GuaranteeAndDeposit::New() const {
  return new GuaranteeAndDeposit;
}

void GuaranteeAndDeposit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cc_required_ = false;
    cvc_required_ = false;
    guarantee_required_ = false;
    if (has_guarantee_amount()) {
      if (guarantee_amount_ != NULL) guarantee_amount_->::price::PriceItem::Clear();
    }
    deposit_required_ = false;
    if (has_deposit_amount()) {
      if (deposit_amount_ != NULL) deposit_amount_->::price::PriceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuaranteeAndDeposit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool cc_required = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cc_required_)));
          set_has_cc_required();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cvc_required;
        break;
      }
      
      // optional bool cvc_required = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cvc_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cvc_required_)));
          set_has_cvc_required();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guarantee_required;
        break;
      }
      
      // optional bool guarantee_required = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guarantee_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &guarantee_required_)));
          set_has_guarantee_required();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guarantee_amount;
        break;
      }
      
      // optional .price.PriceItem guarantee_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guarantee_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guarantee_amount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deposit_required;
        break;
      }
      
      // optional bool deposit_required = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deposit_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deposit_required_)));
          set_has_deposit_required();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deposit_amount;
        break;
      }
      
      // optional .price.PriceItem deposit_amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deposit_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deposit_amount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuaranteeAndDeposit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool cc_required = 1 [default = false];
  if (has_cc_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cc_required(), output);
  }
  
  // optional bool cvc_required = 2 [default = false];
  if (has_cvc_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cvc_required(), output);
  }
  
  // optional bool guarantee_required = 3 [default = false];
  if (has_guarantee_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->guarantee_required(), output);
  }
  
  // optional .price.PriceItem guarantee_amount = 4;
  if (has_guarantee_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->guarantee_amount(), output);
  }
  
  // optional bool deposit_required = 5 [default = false];
  if (has_deposit_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->deposit_required(), output);
  }
  
  // optional .price.PriceItem deposit_amount = 6;
  if (has_deposit_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->deposit_amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuaranteeAndDeposit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool cc_required = 1 [default = false];
  if (has_cc_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cc_required(), target);
  }
  
  // optional bool cvc_required = 2 [default = false];
  if (has_cvc_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cvc_required(), target);
  }
  
  // optional bool guarantee_required = 3 [default = false];
  if (has_guarantee_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->guarantee_required(), target);
  }
  
  // optional .price.PriceItem guarantee_amount = 4;
  if (has_guarantee_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->guarantee_amount(), target);
  }
  
  // optional bool deposit_required = 5 [default = false];
  if (has_deposit_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->deposit_required(), target);
  }
  
  // optional .price.PriceItem deposit_amount = 6;
  if (has_deposit_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->deposit_amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuaranteeAndDeposit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool cc_required = 1 [default = false];
    if (has_cc_required()) {
      total_size += 1 + 1;
    }
    
    // optional bool cvc_required = 2 [default = false];
    if (has_cvc_required()) {
      total_size += 1 + 1;
    }
    
    // optional bool guarantee_required = 3 [default = false];
    if (has_guarantee_required()) {
      total_size += 1 + 1;
    }
    
    // optional .price.PriceItem guarantee_amount = 4;
    if (has_guarantee_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guarantee_amount());
    }
    
    // optional bool deposit_required = 5 [default = false];
    if (has_deposit_required()) {
      total_size += 1 + 1;
    }
    
    // optional .price.PriceItem deposit_amount = 6;
    if (has_deposit_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deposit_amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuaranteeAndDeposit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuaranteeAndDeposit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuaranteeAndDeposit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuaranteeAndDeposit::MergeFrom(const GuaranteeAndDeposit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cc_required()) {
      set_cc_required(from.cc_required());
    }
    if (from.has_cvc_required()) {
      set_cvc_required(from.cvc_required());
    }
    if (from.has_guarantee_required()) {
      set_guarantee_required(from.guarantee_required());
    }
    if (from.has_guarantee_amount()) {
      mutable_guarantee_amount()->::price::PriceItem::MergeFrom(from.guarantee_amount());
    }
    if (from.has_deposit_required()) {
      set_deposit_required(from.deposit_required());
    }
    if (from.has_deposit_amount()) {
      mutable_deposit_amount()->::price::PriceItem::MergeFrom(from.deposit_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuaranteeAndDeposit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuaranteeAndDeposit::CopyFrom(const GuaranteeAndDeposit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuaranteeAndDeposit::IsInitialized() const {
  
  if (has_guarantee_amount()) {
    if (!this->guarantee_amount().IsInitialized()) return false;
  }
  if (has_deposit_amount()) {
    if (!this->deposit_amount().IsInitialized()) return false;
  }
  return true;
}

void GuaranteeAndDeposit::Swap(GuaranteeAndDeposit* other) {
  if (other != this) {
    std::swap(cc_required_, other->cc_required_);
    std::swap(cvc_required_, other->cvc_required_);
    std::swap(guarantee_required_, other->guarantee_required_);
    std::swap(guarantee_amount_, other->guarantee_amount_);
    std::swap(deposit_required_, other->deposit_required_);
    std::swap(deposit_amount_, other->deposit_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuaranteeAndDeposit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuaranteeAndDeposit_descriptor_;
  metadata.reflection = GuaranteeAndDeposit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PromotionInfo::kTypeFieldNumber;
const int PromotionInfo::kValueFieldNumber;
#endif  // !_MSC_VER

PromotionInfo::PromotionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PromotionInfo::InitAsDefaultInstance() {
}

PromotionInfo::PromotionInfo(const PromotionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PromotionInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PromotionInfo::~PromotionInfo() {
  SharedDtor();
}

void PromotionInfo::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void PromotionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PromotionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PromotionInfo_descriptor_;
}

const PromotionInfo& PromotionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

PromotionInfo* PromotionInfo::default_instance_ = NULL;

PromotionInfo* PromotionInfo::New() const {
  return new PromotionInfo;
}

void PromotionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PromotionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .price.PromotionType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (price::PromotionType_IsValid(value)) {
            set_type(static_cast< price::PromotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PromotionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .price.PromotionType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PromotionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .price.PromotionType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PromotionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .price.PromotionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PromotionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PromotionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PromotionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PromotionInfo::MergeFrom(const PromotionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PromotionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PromotionInfo::CopyFrom(const PromotionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromotionInfo::IsInitialized() const {
  
  return true;
}

void PromotionInfo::Swap(PromotionInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PromotionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PromotionInfo_descriptor_;
  metadata.reflection = PromotionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tag::kTypeFieldNumber;
const int Tag::kValueFieldNumber;
#endif  // !_MSC_VER

Tag::Tag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tag::InitAsDefaultInstance() {
}

Tag::Tag(const Tag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tag::SharedCtor() {
  _cached_size_ = 0;
  type_ = 101;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tag::~Tag() {
  SharedDtor();
}

void Tag::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tag_descriptor_;
}

const Tag& Tag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

Tag* Tag::default_instance_ = NULL;

Tag* Tag::New() const {
  return new Tag;
}

void Tag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 101;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .price.TagType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (price::TagType_IsValid(value)) {
            set_type(static_cast< price::TagType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .price.TagType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .price.TagType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .price.TagType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tag::MergeFrom(const Tag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tag::CopyFrom(const Tag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tag::IsInitialized() const {
  
  return true;
}

void Tag::Swap(Tag* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tag_descriptor_;
  metadata.reflection = Tag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancellationInfo::kStartDateFieldNumber;
const int CancellationInfo::kLocalStartDateFieldNumber;
const int CancellationInfo::kEndDateFieldNumber;
const int CancellationInfo::kLocalEndDateFieldNumber;
const int CancellationInfo::kRefundableFieldNumber;
const int CancellationInfo::kCustomerPriceFieldNumber;
const int CancellationInfo::kSupplierPriceFieldNumber;
#endif  // !_MSC_VER

CancellationInfo::CancellationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancellationInfo::InitAsDefaultInstance() {
  customer_price_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
  supplier_price_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
}

CancellationInfo::CancellationInfo(const CancellationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancellationInfo::SharedCtor() {
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  local_start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  local_end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refundable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_price_ = NULL;
  supplier_price_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancellationInfo::~CancellationInfo() {
  SharedDtor();
}

void CancellationInfo::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::kEmptyString) {
    delete start_date_;
  }
  if (local_start_date_ != &::google::protobuf::internal::kEmptyString) {
    delete local_start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::kEmptyString) {
    delete end_date_;
  }
  if (local_end_date_ != &::google::protobuf::internal::kEmptyString) {
    delete local_end_date_;
  }
  if (refundable_ != &::google::protobuf::internal::kEmptyString) {
    delete refundable_;
  }
  if (this != default_instance_) {
    delete customer_price_;
    delete supplier_price_;
  }
}

void CancellationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancellationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancellationInfo_descriptor_;
}

const CancellationInfo& CancellationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

CancellationInfo* CancellationInfo::default_instance_ = NULL;

CancellationInfo* CancellationInfo::New() const {
  return new CancellationInfo;
}

void CancellationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::kEmptyString) {
        start_date_->clear();
      }
    }
    if (has_local_start_date()) {
      if (local_start_date_ != &::google::protobuf::internal::kEmptyString) {
        local_start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::kEmptyString) {
        end_date_->clear();
      }
    }
    if (has_local_end_date()) {
      if (local_end_date_ != &::google::protobuf::internal::kEmptyString) {
        local_end_date_->clear();
      }
    }
    if (has_refundable()) {
      if (refundable_ != &::google::protobuf::internal::kEmptyString) {
        refundable_->clear();
      }
    }
    if (has_customer_price()) {
      if (customer_price_ != NULL) customer_price_->::price::PriceItem::Clear();
    }
    if (has_supplier_price()) {
      if (supplier_price_ != NULL) supplier_price_->::price::PriceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancellationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string start_date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_date().data(), this->start_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_local_start_date;
        break;
      }
      
      // optional string local_start_date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_start_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_start_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_start_date().data(), this->local_start_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_end_date;
        break;
      }
      
      // optional string end_date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->end_date().data(), this->end_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_local_end_date;
        break;
      }
      
      // optional string local_end_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_end_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_end_date().data(), this->local_end_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_refundable;
        break;
      }
      
      // optional string refundable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refundable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refundable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refundable().data(), this->refundable().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_customer_price;
        break;
      }
      
      // optional .price.PriceItem customer_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customer_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_supplier_price;
        break;
      }
      
      // optional .price.PriceItem supplier_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_supplier_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_supplier_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancellationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_date().data(), this->start_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->start_date(), output);
  }
  
  // optional string local_start_date = 2;
  if (has_local_start_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_start_date().data(), this->local_start_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->local_start_date(), output);
  }
  
  // optional string end_date = 3;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_date().data(), this->end_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->end_date(), output);
  }
  
  // optional string local_end_date = 4;
  if (has_local_end_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_end_date().data(), this->local_end_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->local_end_date(), output);
  }
  
  // optional string refundable = 5;
  if (has_refundable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refundable().data(), this->refundable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->refundable(), output);
  }
  
  // optional .price.PriceItem customer_price = 6;
  if (has_customer_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->customer_price(), output);
  }
  
  // optional .price.PriceItem supplier_price = 7;
  if (has_supplier_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->supplier_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancellationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_date().data(), this->start_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_date(), target);
  }
  
  // optional string local_start_date = 2;
  if (has_local_start_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_start_date().data(), this->local_start_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->local_start_date(), target);
  }
  
  // optional string end_date = 3;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_date().data(), this->end_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->end_date(), target);
  }
  
  // optional string local_end_date = 4;
  if (has_local_end_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_end_date().data(), this->local_end_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->local_end_date(), target);
  }
  
  // optional string refundable = 5;
  if (has_refundable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refundable().data(), this->refundable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->refundable(), target);
  }
  
  // optional .price.PriceItem customer_price = 6;
  if (has_customer_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->customer_price(), target);
  }
  
  // optional .price.PriceItem supplier_price = 7;
  if (has_supplier_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->supplier_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancellationInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_date());
    }
    
    // optional string local_start_date = 2;
    if (has_local_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_start_date());
    }
    
    // optional string end_date = 3;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_date());
    }
    
    // optional string local_end_date = 4;
    if (has_local_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_end_date());
    }
    
    // optional string refundable = 5;
    if (has_refundable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refundable());
    }
    
    // optional .price.PriceItem customer_price = 6;
    if (has_customer_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->customer_price());
    }
    
    // optional .price.PriceItem supplier_price = 7;
    if (has_supplier_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->supplier_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancellationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancellationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancellationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancellationInfo::MergeFrom(const CancellationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_local_start_date()) {
      set_local_start_date(from.local_start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_local_end_date()) {
      set_local_end_date(from.local_end_date());
    }
    if (from.has_refundable()) {
      set_refundable(from.refundable());
    }
    if (from.has_customer_price()) {
      mutable_customer_price()->::price::PriceItem::MergeFrom(from.customer_price());
    }
    if (from.has_supplier_price()) {
      mutable_supplier_price()->::price::PriceItem::MergeFrom(from.supplier_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancellationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancellationInfo::CopyFrom(const CancellationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancellationInfo::IsInitialized() const {
  
  if (has_customer_price()) {
    if (!this->customer_price().IsInitialized()) return false;
  }
  if (has_supplier_price()) {
    if (!this->supplier_price().IsInitialized()) return false;
  }
  return true;
}

void CancellationInfo::Swap(CancellationInfo* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(local_start_date_, other->local_start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(local_end_date_, other->local_end_date_);
    std::swap(refundable_, other->refundable_);
    std::swap(customer_price_, other->customer_price_);
    std::swap(supplier_price_, other->supplier_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancellationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancellationInfo_descriptor_;
  metadata.reflection = CancellationInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PriceItem::_default_currency_("CNY");
#ifndef _MSC_VER
const int PriceItem::kAmountFieldNumber;
const int PriceItem::kCurrencyFieldNumber;
const int PriceItem::kCurrencyRateFieldNumber;
#endif  // !_MSC_VER

PriceItem::PriceItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PriceItem::InitAsDefaultInstance() {
}

PriceItem::PriceItem(const PriceItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PriceItem::SharedCtor() {
  _cached_size_ = 0;
  amount_ = GOOGLE_LONGLONG(0);
  currency_ = const_cast< ::std::string*>(&_default_currency_);
  currency_rate_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceItem::~PriceItem() {
  SharedDtor();
}

void PriceItem::SharedDtor() {
  if (currency_ != &_default_currency_) {
    delete currency_;
  }
  if (this != default_instance_) {
  }
}

void PriceItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceItem_descriptor_;
}

const PriceItem& PriceItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

PriceItem* PriceItem::default_instance_ = NULL;

PriceItem* PriceItem::New() const {
  return new PriceItem;
}

void PriceItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amount_ = GOOGLE_LONGLONG(0);
    if (has_currency()) {
      if (currency_ != &_default_currency_) {
        currency_->assign(_default_currency_);
      }
    }
    currency_rate_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_currency;
        break;
      }
      
      // required string currency = 2 [default = "CNY"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_currency_rate;
        break;
      }
      
      // optional double currency_rate = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currency_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currency_rate_)));
          set_has_currency_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriceItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 amount = 1;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->amount(), output);
  }
  
  // required string currency = 2 [default = "CNY"];
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->currency(), output);
  }
  
  // optional double currency_rate = 3 [default = 1];
  if (has_currency_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->currency_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PriceItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 amount = 1;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->amount(), target);
  }
  
  // required string currency = 2 [default = "CNY"];
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->currency(), target);
  }
  
  // optional double currency_rate = 3 [default = 1];
  if (has_currency_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->currency_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PriceItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amount());
    }
    
    // required string currency = 2 [default = "CNY"];
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }
    
    // optional double currency_rate = 3 [default = 1];
    if (has_currency_rate()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceItem::MergeFrom(const PriceItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_currency_rate()) {
      set_currency_rate(from.currency_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceItem::CopyFrom(const PriceItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PriceItem::Swap(PriceItem* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(currency_, other->currency_);
    std::swap(currency_rate_, other->currency_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceItem_descriptor_;
  metadata.reflection = PriceItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyPrice::kDateFieldNumber;
const int DailyPrice::kPriceFieldNumber;
#endif  // !_MSC_VER

DailyPrice::DailyPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyPrice::InitAsDefaultInstance() {
  price_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
}

DailyPrice::DailyPrice(const DailyPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyPrice::SharedCtor() {
  _cached_size_ = 0;
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyPrice::~DailyPrice() {
  SharedDtor();
}

void DailyPrice::SharedDtor() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (this != default_instance_) {
    delete price_;
  }
}

void DailyPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyPrice_descriptor_;
}

const DailyPrice& DailyPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

DailyPrice* DailyPrice::default_instance_ = NULL;

DailyPrice* DailyPrice::New() const {
  return new DailyPrice;
}

void DailyPrice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    if (has_price()) {
      if (price_ != NULL) price_->::price::PriceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_price;
        break;
      }
      
      // optional .price.PriceItem price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->date(), output);
  }
  
  // optional .price.PriceItem price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->date(), target);
  }
  
  // optional .price.PriceItem price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyPrice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }
    
    // optional .price.PriceItem price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyPrice::MergeFrom(const DailyPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_price()) {
      mutable_price()->::price::PriceItem::MergeFrom(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyPrice::CopyFrom(const DailyPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyPrice::IsInitialized() const {
  
  if (has_price()) {
    if (!this->price().IsInitialized()) return false;
  }
  return true;
}

void DailyPrice::Swap(DailyPrice* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyPrice_descriptor_;
  metadata.reflection = DailyPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BedType::kIdFieldNumber;
const int BedType::kBedNameCnFieldNumber;
const int BedType::kBedNameEnFieldNumber;
const int BedType::kNumFieldNumber;
const int BedType::kSizeFieldNumber;
const int BedType::kIsAmbiguousFieldNumber;
#endif  // !_MSC_VER

BedType::BedType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BedType::InitAsDefaultInstance() {
}

BedType::BedType(const BedType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BedType::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bed_name_cn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bed_name_en_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_ambiguous_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BedType::~BedType() {
  SharedDtor();
}

void BedType::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (bed_name_cn_ != &::google::protobuf::internal::kEmptyString) {
    delete bed_name_cn_;
  }
  if (bed_name_en_ != &::google::protobuf::internal::kEmptyString) {
    delete bed_name_en_;
  }
  if (size_ != &::google::protobuf::internal::kEmptyString) {
    delete size_;
  }
  if (this != default_instance_) {
  }
}

void BedType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BedType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BedType_descriptor_;
}

const BedType& BedType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

BedType* BedType::default_instance_ = NULL;

BedType* BedType::New() const {
  return new BedType;
}

void BedType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_bed_name_cn()) {
      if (bed_name_cn_ != &::google::protobuf::internal::kEmptyString) {
        bed_name_cn_->clear();
      }
    }
    if (has_bed_name_en()) {
      if (bed_name_en_ != &::google::protobuf::internal::kEmptyString) {
        bed_name_en_->clear();
      }
    }
    num_ = 0;
    if (has_size()) {
      if (size_ != &::google::protobuf::internal::kEmptyString) {
        size_->clear();
      }
    }
    is_ambiguous_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bed_name_cn;
        break;
      }
      
      // required bytes bed_name_cn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bed_name_cn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bed_name_cn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bed_name_en;
        break;
      }
      
      // optional bytes bed_name_en = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bed_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bed_name_en()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }
      
      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_size;
        break;
      }
      
      // optional bytes size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_ambiguous;
        break;
      }
      
      // optional bool is_ambiguous = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ambiguous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ambiguous_)));
          set_has_is_ambiguous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required bytes bed_name_cn = 2;
  if (has_bed_name_cn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->bed_name_cn(), output);
  }
  
  // optional bytes bed_name_en = 3;
  if (has_bed_name_en()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->bed_name_en(), output);
  }
  
  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }
  
  // optional bytes size = 5;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->size(), output);
  }
  
  // optional bool is_ambiguous = 6 [default = true];
  if (has_is_ambiguous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_ambiguous(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BedType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required bytes bed_name_cn = 2;
  if (has_bed_name_cn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bed_name_cn(), target);
  }
  
  // optional bytes bed_name_en = 3;
  if (has_bed_name_en()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->bed_name_en(), target);
  }
  
  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }
  
  // optional bytes size = 5;
  if (has_size()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->size(), target);
  }
  
  // optional bool is_ambiguous = 6 [default = true];
  if (has_is_ambiguous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_ambiguous(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BedType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required bytes bed_name_cn = 2;
    if (has_bed_name_cn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bed_name_cn());
    }
    
    // optional bytes bed_name_en = 3;
    if (has_bed_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bed_name_en());
    }
    
    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional bytes size = 5;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->size());
    }
    
    // optional bool is_ambiguous = 6 [default = true];
    if (has_is_ambiguous()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BedType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BedType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BedType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BedType::MergeFrom(const BedType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bed_name_cn()) {
      set_bed_name_cn(from.bed_name_cn());
    }
    if (from.has_bed_name_en()) {
      set_bed_name_en(from.bed_name_en());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_is_ambiguous()) {
      set_is_ambiguous(from.is_ambiguous());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BedType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedType::CopyFrom(const BedType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BedType::Swap(BedType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bed_name_cn_, other->bed_name_cn_);
    std::swap(bed_name_en_, other->bed_name_en_);
    std::swap(num_, other->num_);
    std::swap(size_, other->size_);
    std::swap(is_ambiguous_, other->is_ambiguous_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BedType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BedType_descriptor_;
  metadata.reflection = BedType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BedGroup::kBedTypeListFieldNumber;
#endif  // !_MSC_VER

BedGroup::BedGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BedGroup::InitAsDefaultInstance() {
}

BedGroup::BedGroup(const BedGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BedGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BedGroup::~BedGroup() {
  SharedDtor();
}

void BedGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BedGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BedGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BedGroup_descriptor_;
}

const BedGroup& BedGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

BedGroup* BedGroup::default_instance_ = NULL;

BedGroup* BedGroup::New() const {
  return new BedGroup;
}

void BedGroup::Clear() {
  bed_type_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BedGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .price.BedType bed_type_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bed_type_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bed_type_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bed_type_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BedGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .price.BedType bed_type_list = 1;
  for (int i = 0; i < this->bed_type_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bed_type_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BedGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .price.BedType bed_type_list = 1;
  for (int i = 0; i < this->bed_type_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bed_type_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BedGroup::ByteSize() const {
  int total_size = 0;
  
  // repeated .price.BedType bed_type_list = 1;
  total_size += 1 * this->bed_type_list_size();
  for (int i = 0; i < this->bed_type_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bed_type_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BedGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BedGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BedGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BedGroup::MergeFrom(const BedGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  bed_type_list_.MergeFrom(from.bed_type_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BedGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedGroup::CopyFrom(const BedGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedGroup::IsInitialized() const {
  
  for (int i = 0; i < bed_type_list_size(); i++) {
    if (!this->bed_type_list(i).IsInitialized()) return false;
  }
  return true;
}

void BedGroup::Swap(BedGroup* other) {
  if (other != this) {
    bed_type_list_.Swap(&other->bed_type_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BedGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BedGroup_descriptor_;
  metadata.reflection = BedGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargePrice::kPriceFieldNumber;
const int ChargePrice::kPriceOriFieldNumber;
const int ChargePrice::kDescriptionFieldNumber;
const int ChargePrice::kTypeFieldNumber;
const int ChargePrice::kIncludedFieldNumber;
const int ChargePrice::kChargePriceModeFieldNumber;
const int ChargePrice::kChargeAmountFieldNumber;
const int ChargePrice::kChargeAmountCurrencyFieldNumber;
#endif  // !_MSC_VER

ChargePrice::ChargePrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargePrice::InitAsDefaultInstance() {
  price_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
  price_ori_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
}

ChargePrice::ChargePrice(const ChargePrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargePrice::SharedCtor() {
  _cached_size_ = 0;
  price_ = NULL;
  price_ori_ = NULL;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  included_ = true;
  charge_price_mode_ = 0;
  charge_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charge_amount_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargePrice::~ChargePrice() {
  SharedDtor();
}

void ChargePrice::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (charge_amount_ != &::google::protobuf::internal::kEmptyString) {
    delete charge_amount_;
  }
  if (charge_amount_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete charge_amount_currency_;
  }
  if (this != default_instance_) {
    delete price_;
    delete price_ori_;
  }
}

void ChargePrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargePrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargePrice_descriptor_;
}

const ChargePrice& ChargePrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

ChargePrice* ChargePrice::default_instance_ = NULL;

ChargePrice* ChargePrice::New() const {
  return new ChargePrice;
}

void ChargePrice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_price()) {
      if (price_ != NULL) price_->::price::PriceItem::Clear();
    }
    if (has_price_ori()) {
      if (price_ori_ != NULL) price_ori_->::price::PriceItem::Clear();
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    type_ = 0;
    included_ = true;
    charge_price_mode_ = 0;
    if (has_charge_amount()) {
      if (charge_amount_ != &::google::protobuf::internal::kEmptyString) {
        charge_amount_->clear();
      }
    }
    if (has_charge_amount_currency()) {
      if (charge_amount_currency_ != &::google::protobuf::internal::kEmptyString) {
        charge_amount_currency_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargePrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .price.PriceItem price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_price_ori;
        break;
      }
      
      // optional .price.PriceItem price_ori = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price_ori:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price_ori()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }
      
      // required bytes description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional .price.ChargePriceType type = 4 [default = UNKNOWN];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (price::ChargePriceType_IsValid(value)) {
            set_type(static_cast< price::ChargePriceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_included;
        break;
      }
      
      // optional bool included = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_included:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &included_)));
          set_has_included();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_charge_price_mode;
        break;
      }
      
      // optional .price.ChargePriceMode charge_price_mode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charge_price_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (price::ChargePriceMode_IsValid(value)) {
            set_charge_price_mode(static_cast< price::ChargePriceMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_charge_amount;
        break;
      }
      
      // optional string charge_amount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charge_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charge_amount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charge_amount().data(), this->charge_amount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_charge_amount_currency;
        break;
      }
      
      // optional string charge_amount_currency = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charge_amount_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charge_amount_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charge_amount_currency().data(), this->charge_amount_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargePrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .price.PriceItem price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->price(), output);
  }
  
  // optional .price.PriceItem price_ori = 2;
  if (has_price_ori()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->price_ori(), output);
  }
  
  // required bytes description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->description(), output);
  }
  
  // optional .price.ChargePriceType type = 4 [default = UNKNOWN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // optional bool included = 5 [default = true];
  if (has_included()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->included(), output);
  }
  
  // optional .price.ChargePriceMode charge_price_mode = 6;
  if (has_charge_price_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->charge_price_mode(), output);
  }
  
  // optional string charge_amount = 7;
  if (has_charge_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charge_amount().data(), this->charge_amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->charge_amount(), output);
  }
  
  // optional string charge_amount_currency = 8;
  if (has_charge_amount_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charge_amount_currency().data(), this->charge_amount_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->charge_amount_currency(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargePrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .price.PriceItem price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->price(), target);
  }
  
  // optional .price.PriceItem price_ori = 2;
  if (has_price_ori()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->price_ori(), target);
  }
  
  // required bytes description = 3;
  if (has_description()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->description(), target);
  }
  
  // optional .price.ChargePriceType type = 4 [default = UNKNOWN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // optional bool included = 5 [default = true];
  if (has_included()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->included(), target);
  }
  
  // optional .price.ChargePriceMode charge_price_mode = 6;
  if (has_charge_price_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->charge_price_mode(), target);
  }
  
  // optional string charge_amount = 7;
  if (has_charge_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charge_amount().data(), this->charge_amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->charge_amount(), target);
  }
  
  // optional string charge_amount_currency = 8;
  if (has_charge_amount_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charge_amount_currency().data(), this->charge_amount_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->charge_amount_currency(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargePrice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .price.PriceItem price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price());
    }
    
    // optional .price.PriceItem price_ori = 2;
    if (has_price_ori()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price_ori());
    }
    
    // required bytes description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }
    
    // optional .price.ChargePriceType type = 4 [default = UNKNOWN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional bool included = 5 [default = true];
    if (has_included()) {
      total_size += 1 + 1;
    }
    
    // optional .price.ChargePriceMode charge_price_mode = 6;
    if (has_charge_price_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->charge_price_mode());
    }
    
    // optional string charge_amount = 7;
    if (has_charge_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charge_amount());
    }
    
    // optional string charge_amount_currency = 8;
    if (has_charge_amount_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charge_amount_currency());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargePrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargePrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargePrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargePrice::MergeFrom(const ChargePrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      mutable_price()->::price::PriceItem::MergeFrom(from.price());
    }
    if (from.has_price_ori()) {
      mutable_price_ori()->::price::PriceItem::MergeFrom(from.price_ori());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_included()) {
      set_included(from.included());
    }
    if (from.has_charge_price_mode()) {
      set_charge_price_mode(from.charge_price_mode());
    }
    if (from.has_charge_amount()) {
      set_charge_amount(from.charge_amount());
    }
    if (from.has_charge_amount_currency()) {
      set_charge_amount_currency(from.charge_amount_currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargePrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargePrice::CopyFrom(const ChargePrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargePrice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_price()) {
    if (!this->price().IsInitialized()) return false;
  }
  if (has_price_ori()) {
    if (!this->price_ori().IsInitialized()) return false;
  }
  return true;
}

void ChargePrice::Swap(ChargePrice* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(price_ori_, other->price_ori_);
    std::swap(description_, other->description_);
    std::swap(type_, other->type_);
    std::swap(included_, other->included_);
    std::swap(charge_price_mode_, other->charge_price_mode_);
    std::swap(charge_amount_, other->charge_amount_);
    std::swap(charge_amount_currency_, other->charge_amount_currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargePrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargePrice_descriptor_;
  metadata.reflection = ChargePrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoardInfo::kIncludedFieldNumber;
const int BoardInfo::kDescriptionFieldNumber;
const int BoardInfo::kNumberFieldNumber;
#endif  // !_MSC_VER

BoardInfo::BoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoardInfo::InitAsDefaultInstance() {
}

BoardInfo::BoardInfo(const BoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoardInfo::SharedCtor() {
  _cached_size_ = 0;
  included_ = false;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoardInfo::~BoardInfo() {
  SharedDtor();
}

void BoardInfo::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void BoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoardInfo_descriptor_;
}

const BoardInfo& BoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

BoardInfo* BoardInfo::default_instance_ = NULL;

BoardInfo* BoardInfo::New() const {
  return new BoardInfo;
}

void BoardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    included_ = false;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool included = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &included_)));
          set_has_included();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }
      
      // optional bytes description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }
      
      // optional int32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool included = 1;
  if (has_included()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->included(), output);
  }
  
  // optional bytes description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->description(), output);
  }
  
  // optional int32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool included = 1;
  if (has_included()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->included(), target);
  }
  
  // optional bytes description = 2;
  if (has_description()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->description(), target);
  }
  
  // optional int32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool included = 1;
    if (has_included()) {
      total_size += 1 + 1;
    }
    
    // optional bytes description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }
    
    // optional int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoardInfo::MergeFrom(const BoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_included()) {
      set_included(from.included());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoardInfo::CopyFrom(const BoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BoardInfo::Swap(BoardInfo* other) {
  if (other != this) {
    std::swap(included_, other->included_);
    std::swap(description_, other->description_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoardInfo_descriptor_;
  metadata.reflection = BoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageLink::kImageIdFieldNumber;
const int ImageLink::kImageUrlFieldNumber;
#endif  // !_MSC_VER

ImageLink::ImageLink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageLink::InitAsDefaultInstance() {
}

ImageLink::ImageLink(const ImageLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageLink::SharedCtor() {
  _cached_size_ = 0;
  image_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageLink::~ImageLink() {
  SharedDtor();
}

void ImageLink::SharedDtor() {
  if (image_id_ != &::google::protobuf::internal::kEmptyString) {
    delete image_id_;
  }
  if (image_url_ != &::google::protobuf::internal::kEmptyString) {
    delete image_url_;
  }
  if (this != default_instance_) {
  }
}

void ImageLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageLink_descriptor_;
}

const ImageLink& ImageLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

ImageLink* ImageLink::default_instance_ = NULL;

ImageLink* ImageLink::New() const {
  return new ImageLink;
}

void ImageLink::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image_id()) {
      if (image_id_ != &::google::protobuf::internal::kEmptyString) {
        image_id_->clear();
      }
    }
    if (has_image_url()) {
      if (image_url_ != &::google::protobuf::internal::kEmptyString) {
        image_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_id().data(), this->image_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image_url;
        break;
      }
      
      // optional string image_url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_url().data(), this->image_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string image_id = 1;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->image_id(), output);
  }
  
  // optional string image_url = 2;
  if (has_image_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->image_url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string image_id = 1;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_id(), target);
  }
  
  // optional string image_url = 2;
  if (has_image_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image_url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageLink::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string image_id = 1;
    if (has_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_id());
    }
    
    // optional string image_url = 2;
    if (has_image_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageLink::MergeFrom(const ImageLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_id()) {
      set_image_id(from.image_id());
    }
    if (from.has_image_url()) {
      set_image_url(from.image_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageLink::CopyFrom(const ImageLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageLink::IsInitialized() const {
  
  return true;
}

void ImageLink::Swap(ImageLink* other) {
  if (other != this) {
    std::swap(image_id_, other->image_id_);
    std::swap(image_url_, other->image_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageLink_descriptor_;
  metadata.reflection = ImageLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtraCharge::kTotalFieldNumber;
const int ExtraCharge::kTotalOriFieldNumber;
const int ExtraCharge::kChargePriceListFieldNumber;
#endif  // !_MSC_VER

ExtraCharge::ExtraCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraCharge::InitAsDefaultInstance() {
  total_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
  total_ori_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
}

ExtraCharge::ExtraCharge(const ExtraCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraCharge::SharedCtor() {
  _cached_size_ = 0;
  total_ = NULL;
  total_ori_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraCharge::~ExtraCharge() {
  SharedDtor();
}

void ExtraCharge::SharedDtor() {
  if (this != default_instance_) {
    delete total_;
    delete total_ori_;
  }
}

void ExtraCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraCharge_descriptor_;
}

const ExtraCharge& ExtraCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

ExtraCharge* ExtraCharge::default_instance_ = NULL;

ExtraCharge* ExtraCharge::New() const {
  return new ExtraCharge;
}

void ExtraCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_total()) {
      if (total_ != NULL) total_->::price::PriceItem::Clear();
    }
    if (has_total_ori()) {
      if (total_ori_ != NULL) total_ori_->::price::PriceItem::Clear();
    }
  }
  charge_price_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .price.PriceItem total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_total_ori;
        break;
      }
      
      // required .price.PriceItem total_ori = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_ori:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_ori()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charge_price_list;
        break;
      }
      
      // repeated .price.ChargePrice charge_price_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charge_price_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charge_price_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charge_price_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .price.PriceItem total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->total(), output);
  }
  
  // required .price.PriceItem total_ori = 2;
  if (has_total_ori()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->total_ori(), output);
  }
  
  // repeated .price.ChargePrice charge_price_list = 3;
  for (int i = 0; i < this->charge_price_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->charge_price_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .price.PriceItem total = 1;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->total(), target);
  }
  
  // required .price.PriceItem total_ori = 2;
  if (has_total_ori()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->total_ori(), target);
  }
  
  // repeated .price.ChargePrice charge_price_list = 3;
  for (int i = 0; i < this->charge_price_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->charge_price_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraCharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .price.PriceItem total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total());
    }
    
    // required .price.PriceItem total_ori = 2;
    if (has_total_ori()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_ori());
    }
    
  }
  // repeated .price.ChargePrice charge_price_list = 3;
  total_size += 1 * this->charge_price_list_size();
  for (int i = 0; i < this->charge_price_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charge_price_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraCharge::MergeFrom(const ExtraCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  charge_price_list_.MergeFrom(from.charge_price_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      mutable_total()->::price::PriceItem::MergeFrom(from.total());
    }
    if (from.has_total_ori()) {
      mutable_total_ori()->::price::PriceItem::MergeFrom(from.total_ori());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraCharge::CopyFrom(const ExtraCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraCharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_total()) {
    if (!this->total().IsInitialized()) return false;
  }
  if (has_total_ori()) {
    if (!this->total_ori().IsInitialized()) return false;
  }
  for (int i = 0; i < charge_price_list_size(); i++) {
    if (!this->charge_price_list(i).IsInitialized()) return false;
  }
  return true;
}

void ExtraCharge::Swap(ExtraCharge* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    std::swap(total_ori_, other->total_ori_);
    charge_price_list_.Swap(&other->charge_price_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraCharge_descriptor_;
  metadata.reflection = ExtraCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RatePlan::kIsInstantConfirmFieldNumber;
const int RatePlan::kBreakfastIncludedFieldNumber;
const int RatePlan::kHalfboardIncludedFieldNumber;
const int RatePlan::kFullboardIncludedFieldNumber;
const int RatePlan::kInternetIncludedFieldNumber;
const int RatePlan::kWifiIncludedFieldNumber;
const int RatePlan::kOtaPromoTypeFieldNumber;
const int RatePlan::kUserInfoFieldNumber;
const int RatePlan::kPayTypeFieldNumber;
const int RatePlan::kGuaranteeAndDepositFieldNumber;
const int RatePlan::kPromotionInfoListFieldNumber;
const int RatePlan::kCancellationInfoListFieldNumber;
const int RatePlan::kElongCancellationInfoListFieldNumber;
#endif  // !_MSC_VER

RatePlan::RatePlan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RatePlan::InitAsDefaultInstance() {
  user_info_ = const_cast< ::price::UserInfo*>(&::price::UserInfo::default_instance());
  guarantee_and_deposit_ = const_cast< ::price::GuaranteeAndDeposit*>(&::price::GuaranteeAndDeposit::default_instance());
}

RatePlan::RatePlan(const RatePlan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RatePlan::SharedCtor() {
  _cached_size_ = 0;
  is_instant_confirm_ = true;
  breakfast_included_ = false;
  halfboard_included_ = false;
  fullboard_included_ = false;
  internet_included_ = false;
  wifi_included_ = false;
  ota_promo_type_ = 0;
  user_info_ = NULL;
  pay_type_ = 1;
  guarantee_and_deposit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RatePlan::~RatePlan() {
  SharedDtor();
}

void RatePlan::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
    delete guarantee_and_deposit_;
  }
}

void RatePlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RatePlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RatePlan_descriptor_;
}

const RatePlan& RatePlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

RatePlan* RatePlan::default_instance_ = NULL;

RatePlan* RatePlan::New() const {
  return new RatePlan;
}

void RatePlan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_instant_confirm_ = true;
    breakfast_included_ = false;
    halfboard_included_ = false;
    fullboard_included_ = false;
    internet_included_ = false;
    wifi_included_ = false;
    ota_promo_type_ = 0;
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::price::UserInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pay_type_ = 1;
    if (has_guarantee_and_deposit()) {
      if (guarantee_and_deposit_ != NULL) guarantee_and_deposit_->::price::GuaranteeAndDeposit::Clear();
    }
  }
  promotion_info_list_.Clear();
  cancellation_info_list_.Clear();
  elong_cancellation_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RatePlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_instant_confirm = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_instant_confirm_)));
          set_has_is_instant_confirm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_breakfast_included;
        break;
      }
      
      // optional bool breakfast_included = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breakfast_included:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &breakfast_included_)));
          set_has_breakfast_included();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_halfboard_included;
        break;
      }
      
      // optional bool halfboard_included = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halfboard_included:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &halfboard_included_)));
          set_has_halfboard_included();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fullboard_included;
        break;
      }
      
      // optional bool fullboard_included = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fullboard_included:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fullboard_included_)));
          set_has_fullboard_included();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_internet_included;
        break;
      }
      
      // optional bool internet_included = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_internet_included:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &internet_included_)));
          set_has_internet_included();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wifi_included;
        break;
      }
      
      // optional bool wifi_included = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wifi_included:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wifi_included_)));
          set_has_wifi_included();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ota_promo_type;
        break;
      }
      
      // optional int32 ota_promo_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ota_promo_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ota_promo_type_)));
          set_has_ota_promo_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_user_info;
        break;
      }
      
      // optional .price.UserInfo user_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pay_type;
        break;
      }
      
      // optional .price.PayType pay_type = 9 [default = PRE_PAY];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (price::PayType_IsValid(value)) {
            set_pay_type(static_cast< price::PayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_guarantee_and_deposit;
        break;
      }
      
      // optional .price.GuaranteeAndDeposit guarantee_and_deposit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guarantee_and_deposit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guarantee_and_deposit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_promotion_info_list;
        break;
      }
      
      // repeated .price.PromotionInfo promotion_info_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promotion_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_promotion_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_promotion_info_list;
        if (input->ExpectTag(98)) goto parse_cancellation_info_list;
        break;
      }
      
      // repeated .price.CancellationInfo cancellation_info_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cancellation_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cancellation_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_cancellation_info_list;
        if (input->ExpectTag(106)) goto parse_elong_cancellation_info_list;
        break;
      }
      
      // repeated .price.CancellationInfo elong_cancellation_info_list = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elong_cancellation_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elong_cancellation_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_elong_cancellation_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RatePlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_instant_confirm = 1 [default = true];
  if (has_is_instant_confirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_instant_confirm(), output);
  }
  
  // optional bool breakfast_included = 2 [default = false];
  if (has_breakfast_included()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->breakfast_included(), output);
  }
  
  // optional bool halfboard_included = 3 [default = false];
  if (has_halfboard_included()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->halfboard_included(), output);
  }
  
  // optional bool fullboard_included = 4 [default = false];
  if (has_fullboard_included()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fullboard_included(), output);
  }
  
  // optional bool internet_included = 5 [default = false];
  if (has_internet_included()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->internet_included(), output);
  }
  
  // optional bool wifi_included = 6 [default = false];
  if (has_wifi_included()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->wifi_included(), output);
  }
  
  // optional int32 ota_promo_type = 7;
  if (has_ota_promo_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ota_promo_type(), output);
  }
  
  // optional .price.UserInfo user_info = 8;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->user_info(), output);
  }
  
  // optional .price.PayType pay_type = 9 [default = PRE_PAY];
  if (has_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->pay_type(), output);
  }
  
  // optional .price.GuaranteeAndDeposit guarantee_and_deposit = 10;
  if (has_guarantee_and_deposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->guarantee_and_deposit(), output);
  }
  
  // repeated .price.PromotionInfo promotion_info_list = 11;
  for (int i = 0; i < this->promotion_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->promotion_info_list(i), output);
  }
  
  // repeated .price.CancellationInfo cancellation_info_list = 12;
  for (int i = 0; i < this->cancellation_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->cancellation_info_list(i), output);
  }
  
  // repeated .price.CancellationInfo elong_cancellation_info_list = 13;
  for (int i = 0; i < this->elong_cancellation_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->elong_cancellation_info_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RatePlan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_instant_confirm = 1 [default = true];
  if (has_is_instant_confirm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_instant_confirm(), target);
  }
  
  // optional bool breakfast_included = 2 [default = false];
  if (has_breakfast_included()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->breakfast_included(), target);
  }
  
  // optional bool halfboard_included = 3 [default = false];
  if (has_halfboard_included()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->halfboard_included(), target);
  }
  
  // optional bool fullboard_included = 4 [default = false];
  if (has_fullboard_included()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fullboard_included(), target);
  }
  
  // optional bool internet_included = 5 [default = false];
  if (has_internet_included()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->internet_included(), target);
  }
  
  // optional bool wifi_included = 6 [default = false];
  if (has_wifi_included()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->wifi_included(), target);
  }
  
  // optional int32 ota_promo_type = 7;
  if (has_ota_promo_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ota_promo_type(), target);
  }
  
  // optional .price.UserInfo user_info = 8;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->user_info(), target);
  }
  
  // optional .price.PayType pay_type = 9 [default = PRE_PAY];
  if (has_pay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->pay_type(), target);
  }
  
  // optional .price.GuaranteeAndDeposit guarantee_and_deposit = 10;
  if (has_guarantee_and_deposit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->guarantee_and_deposit(), target);
  }
  
  // repeated .price.PromotionInfo promotion_info_list = 11;
  for (int i = 0; i < this->promotion_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->promotion_info_list(i), target);
  }
  
  // repeated .price.CancellationInfo cancellation_info_list = 12;
  for (int i = 0; i < this->cancellation_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->cancellation_info_list(i), target);
  }
  
  // repeated .price.CancellationInfo elong_cancellation_info_list = 13;
  for (int i = 0; i < this->elong_cancellation_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->elong_cancellation_info_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RatePlan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_instant_confirm = 1 [default = true];
    if (has_is_instant_confirm()) {
      total_size += 1 + 1;
    }
    
    // optional bool breakfast_included = 2 [default = false];
    if (has_breakfast_included()) {
      total_size += 1 + 1;
    }
    
    // optional bool halfboard_included = 3 [default = false];
    if (has_halfboard_included()) {
      total_size += 1 + 1;
    }
    
    // optional bool fullboard_included = 4 [default = false];
    if (has_fullboard_included()) {
      total_size += 1 + 1;
    }
    
    // optional bool internet_included = 5 [default = false];
    if (has_internet_included()) {
      total_size += 1 + 1;
    }
    
    // optional bool wifi_included = 6 [default = false];
    if (has_wifi_included()) {
      total_size += 1 + 1;
    }
    
    // optional int32 ota_promo_type = 7;
    if (has_ota_promo_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ota_promo_type());
    }
    
    // optional .price.UserInfo user_info = 8;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .price.PayType pay_type = 9 [default = PRE_PAY];
    if (has_pay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pay_type());
    }
    
    // optional .price.GuaranteeAndDeposit guarantee_and_deposit = 10;
    if (has_guarantee_and_deposit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guarantee_and_deposit());
    }
    
  }
  // repeated .price.PromotionInfo promotion_info_list = 11;
  total_size += 1 * this->promotion_info_list_size();
  for (int i = 0; i < this->promotion_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->promotion_info_list(i));
  }
  
  // repeated .price.CancellationInfo cancellation_info_list = 12;
  total_size += 1 * this->cancellation_info_list_size();
  for (int i = 0; i < this->cancellation_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cancellation_info_list(i));
  }
  
  // repeated .price.CancellationInfo elong_cancellation_info_list = 13;
  total_size += 1 * this->elong_cancellation_info_list_size();
  for (int i = 0; i < this->elong_cancellation_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elong_cancellation_info_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RatePlan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RatePlan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RatePlan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RatePlan::MergeFrom(const RatePlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  promotion_info_list_.MergeFrom(from.promotion_info_list_);
  cancellation_info_list_.MergeFrom(from.cancellation_info_list_);
  elong_cancellation_info_list_.MergeFrom(from.elong_cancellation_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_instant_confirm()) {
      set_is_instant_confirm(from.is_instant_confirm());
    }
    if (from.has_breakfast_included()) {
      set_breakfast_included(from.breakfast_included());
    }
    if (from.has_halfboard_included()) {
      set_halfboard_included(from.halfboard_included());
    }
    if (from.has_fullboard_included()) {
      set_fullboard_included(from.fullboard_included());
    }
    if (from.has_internet_included()) {
      set_internet_included(from.internet_included());
    }
    if (from.has_wifi_included()) {
      set_wifi_included(from.wifi_included());
    }
    if (from.has_ota_promo_type()) {
      set_ota_promo_type(from.ota_promo_type());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::price::UserInfo::MergeFrom(from.user_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pay_type()) {
      set_pay_type(from.pay_type());
    }
    if (from.has_guarantee_and_deposit()) {
      mutable_guarantee_and_deposit()->::price::GuaranteeAndDeposit::MergeFrom(from.guarantee_and_deposit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RatePlan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RatePlan::CopyFrom(const RatePlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RatePlan::IsInitialized() const {
  
  if (has_guarantee_and_deposit()) {
    if (!this->guarantee_and_deposit().IsInitialized()) return false;
  }
  for (int i = 0; i < cancellation_info_list_size(); i++) {
    if (!this->cancellation_info_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < elong_cancellation_info_list_size(); i++) {
    if (!this->elong_cancellation_info_list(i).IsInitialized()) return false;
  }
  return true;
}

void RatePlan::Swap(RatePlan* other) {
  if (other != this) {
    std::swap(is_instant_confirm_, other->is_instant_confirm_);
    std::swap(breakfast_included_, other->breakfast_included_);
    std::swap(halfboard_included_, other->halfboard_included_);
    std::swap(fullboard_included_, other->fullboard_included_);
    std::swap(internet_included_, other->internet_included_);
    std::swap(wifi_included_, other->wifi_included_);
    std::swap(ota_promo_type_, other->ota_promo_type_);
    std::swap(user_info_, other->user_info_);
    std::swap(pay_type_, other->pay_type_);
    std::swap(guarantee_and_deposit_, other->guarantee_and_deposit_);
    promotion_info_list_.Swap(&other->promotion_info_list_);
    cancellation_info_list_.Swap(&other->cancellation_info_list_);
    elong_cancellation_info_list_.Swap(&other->elong_cancellation_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RatePlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RatePlan_descriptor_;
  metadata.reflection = RatePlan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductDesc::kBoardInfoListFieldNumber;
const int ProductDesc::kProductBedGroupFieldNumber;
const int ProductDesc::kRateCommentFieldNumber;
const int ProductDesc::kPrepayDescFieldNumber;
const int ProductDesc::kCancellationDescCnFieldNumber;
const int ProductDesc::kCancellationDescEnFieldNumber;
const int ProductDesc::kProductCreditCardFieldNumber;
#endif  // !_MSC_VER

ProductDesc::ProductDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductDesc::InitAsDefaultInstance() {
}

ProductDesc::ProductDesc(const ProductDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductDesc::SharedCtor() {
  _cached_size_ = 0;
  rate_comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prepay_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cancellation_desc_cn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cancellation_desc_en_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductDesc::~ProductDesc() {
  SharedDtor();
}

void ProductDesc::SharedDtor() {
  if (rate_comment_ != &::google::protobuf::internal::kEmptyString) {
    delete rate_comment_;
  }
  if (prepay_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete prepay_desc_;
  }
  if (cancellation_desc_cn_ != &::google::protobuf::internal::kEmptyString) {
    delete cancellation_desc_cn_;
  }
  if (cancellation_desc_en_ != &::google::protobuf::internal::kEmptyString) {
    delete cancellation_desc_en_;
  }
  if (this != default_instance_) {
  }
}

void ProductDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductDesc_descriptor_;
}

const ProductDesc& ProductDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

ProductDesc* ProductDesc::default_instance_ = NULL;

ProductDesc* ProductDesc::New() const {
  return new ProductDesc;
}

void ProductDesc::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_rate_comment()) {
      if (rate_comment_ != &::google::protobuf::internal::kEmptyString) {
        rate_comment_->clear();
      }
    }
    if (has_prepay_desc()) {
      if (prepay_desc_ != &::google::protobuf::internal::kEmptyString) {
        prepay_desc_->clear();
      }
    }
    if (has_cancellation_desc_cn()) {
      if (cancellation_desc_cn_ != &::google::protobuf::internal::kEmptyString) {
        cancellation_desc_cn_->clear();
      }
    }
    if (has_cancellation_desc_en()) {
      if (cancellation_desc_en_ != &::google::protobuf::internal::kEmptyString) {
        cancellation_desc_en_->clear();
      }
    }
  }
  board_info_list_.Clear();
  product_bed_group_.Clear();
  product_credit_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .price.BoardInfo board_info_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_board_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_board_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_board_info_list;
        if (input->ExpectTag(18)) goto parse_product_bed_group;
        break;
      }
      
      // repeated .price.BedGroup product_bed_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_bed_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_product_bed_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_product_bed_group;
        if (input->ExpectTag(26)) goto parse_rate_comment;
        break;
      }
      
      // optional bytes rate_comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rate_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rate_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prepay_desc;
        break;
      }
      
      // optional bytes prepay_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prepay_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prepay_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cancellation_desc_cn;
        break;
      }
      
      // optional bytes cancellation_desc_cn = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cancellation_desc_cn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cancellation_desc_cn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cancellation_desc_en;
        break;
      }
      
      // optional bytes cancellation_desc_en = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cancellation_desc_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cancellation_desc_en()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_product_credit_card;
        break;
      }
      
      // repeated .price.CreditCard product_credit_card = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_credit_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_product_credit_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_product_credit_card;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .price.BoardInfo board_info_list = 1;
  for (int i = 0; i < this->board_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->board_info_list(i), output);
  }
  
  // repeated .price.BedGroup product_bed_group = 2;
  for (int i = 0; i < this->product_bed_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->product_bed_group(i), output);
  }
  
  // optional bytes rate_comment = 3;
  if (has_rate_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->rate_comment(), output);
  }
  
  // optional bytes prepay_desc = 4;
  if (has_prepay_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->prepay_desc(), output);
  }
  
  // optional bytes cancellation_desc_cn = 5;
  if (has_cancellation_desc_cn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->cancellation_desc_cn(), output);
  }
  
  // optional bytes cancellation_desc_en = 6;
  if (has_cancellation_desc_en()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->cancellation_desc_en(), output);
  }
  
  // repeated .price.CreditCard product_credit_card = 7;
  for (int i = 0; i < this->product_credit_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->product_credit_card(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .price.BoardInfo board_info_list = 1;
  for (int i = 0; i < this->board_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->board_info_list(i), target);
  }
  
  // repeated .price.BedGroup product_bed_group = 2;
  for (int i = 0; i < this->product_bed_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->product_bed_group(i), target);
  }
  
  // optional bytes rate_comment = 3;
  if (has_rate_comment()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->rate_comment(), target);
  }
  
  // optional bytes prepay_desc = 4;
  if (has_prepay_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->prepay_desc(), target);
  }
  
  // optional bytes cancellation_desc_cn = 5;
  if (has_cancellation_desc_cn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->cancellation_desc_cn(), target);
  }
  
  // optional bytes cancellation_desc_en = 6;
  if (has_cancellation_desc_en()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->cancellation_desc_en(), target);
  }
  
  // repeated .price.CreditCard product_credit_card = 7;
  for (int i = 0; i < this->product_credit_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->product_credit_card(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bytes rate_comment = 3;
    if (has_rate_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rate_comment());
    }
    
    // optional bytes prepay_desc = 4;
    if (has_prepay_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prepay_desc());
    }
    
    // optional bytes cancellation_desc_cn = 5;
    if (has_cancellation_desc_cn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cancellation_desc_cn());
    }
    
    // optional bytes cancellation_desc_en = 6;
    if (has_cancellation_desc_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cancellation_desc_en());
    }
    
  }
  // repeated .price.BoardInfo board_info_list = 1;
  total_size += 1 * this->board_info_list_size();
  for (int i = 0; i < this->board_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->board_info_list(i));
  }
  
  // repeated .price.BedGroup product_bed_group = 2;
  total_size += 1 * this->product_bed_group_size();
  for (int i = 0; i < this->product_bed_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->product_bed_group(i));
  }
  
  // repeated .price.CreditCard product_credit_card = 7;
  total_size += 1 * this->product_credit_card_size();
  for (int i = 0; i < this->product_credit_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->product_credit_card(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductDesc::MergeFrom(const ProductDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  board_info_list_.MergeFrom(from.board_info_list_);
  product_bed_group_.MergeFrom(from.product_bed_group_);
  product_credit_card_.MergeFrom(from.product_credit_card_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_rate_comment()) {
      set_rate_comment(from.rate_comment());
    }
    if (from.has_prepay_desc()) {
      set_prepay_desc(from.prepay_desc());
    }
    if (from.has_cancellation_desc_cn()) {
      set_cancellation_desc_cn(from.cancellation_desc_cn());
    }
    if (from.has_cancellation_desc_en()) {
      set_cancellation_desc_en(from.cancellation_desc_en());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductDesc::CopyFrom(const ProductDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductDesc::IsInitialized() const {
  
  for (int i = 0; i < board_info_list_size(); i++) {
    if (!this->board_info_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < product_bed_group_size(); i++) {
    if (!this->product_bed_group(i).IsInitialized()) return false;
  }
  return true;
}

void ProductDesc::Swap(ProductDesc* other) {
  if (other != this) {
    board_info_list_.Swap(&other->board_info_list_);
    product_bed_group_.Swap(&other->product_bed_group_);
    std::swap(rate_comment_, other->rate_comment_);
    std::swap(prepay_desc_, other->prepay_desc_);
    std::swap(cancellation_desc_cn_, other->cancellation_desc_cn_);
    std::swap(cancellation_desc_en_, other->cancellation_desc_en_);
    product_credit_card_.Swap(&other->product_credit_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductDesc_descriptor_;
  metadata.reflection = ProductDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomDesc::kRoomDescTextFieldNumber;
const int RoomDesc::kRoomBedGroupFieldNumber;
const int RoomDesc::kImageLinkListFieldNumber;
const int RoomDesc::kInternetFieldNumber;
const int RoomDesc::kSmokingPreferencesFieldNumber;
const int RoomDesc::kMealDescFieldNumber;
const int RoomDesc::kRoomSizeFieldNumber;
const int RoomDesc::kHasWindowFieldNumber;
const int RoomDesc::kFacilityListFieldNumber;
#endif  // !_MSC_VER

RoomDesc::RoomDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomDesc::InitAsDefaultInstance() {
}

RoomDesc::RoomDesc(const RoomDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomDesc::SharedCtor() {
  _cached_size_ = 0;
  room_desc_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  internet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smoking_preferences_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  meal_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_window_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomDesc::~RoomDesc() {
  SharedDtor();
}

void RoomDesc::SharedDtor() {
  if (room_desc_text_ != &::google::protobuf::internal::kEmptyString) {
    delete room_desc_text_;
  }
  if (internet_ != &::google::protobuf::internal::kEmptyString) {
    delete internet_;
  }
  if (smoking_preferences_ != &::google::protobuf::internal::kEmptyString) {
    delete smoking_preferences_;
  }
  if (meal_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete meal_desc_;
  }
  if (room_size_ != &::google::protobuf::internal::kEmptyString) {
    delete room_size_;
  }
  if (this != default_instance_) {
  }
}

void RoomDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomDesc_descriptor_;
}

const RoomDesc& RoomDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

RoomDesc* RoomDesc::default_instance_ = NULL;

RoomDesc* RoomDesc::New() const {
  return new RoomDesc;
}

void RoomDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room_desc_text()) {
      if (room_desc_text_ != &::google::protobuf::internal::kEmptyString) {
        room_desc_text_->clear();
      }
    }
    if (has_internet()) {
      if (internet_ != &::google::protobuf::internal::kEmptyString) {
        internet_->clear();
      }
    }
    if (has_smoking_preferences()) {
      if (smoking_preferences_ != &::google::protobuf::internal::kEmptyString) {
        smoking_preferences_->clear();
      }
    }
    if (has_meal_desc()) {
      if (meal_desc_ != &::google::protobuf::internal::kEmptyString) {
        meal_desc_->clear();
      }
    }
    if (has_room_size()) {
      if (room_size_ != &::google::protobuf::internal::kEmptyString) {
        room_size_->clear();
      }
    }
    has_window_ = 2;
  }
  room_bed_group_.Clear();
  image_link_list_.Clear();
  facility_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes room_desc_text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_desc_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_bed_group;
        break;
      }
      
      // repeated .price.BedGroup room_bed_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_bed_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_bed_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_bed_group;
        if (input->ExpectTag(26)) goto parse_image_link_list;
        break;
      }
      
      // repeated .price.ImageLink image_link_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_link_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image_link_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_image_link_list;
        if (input->ExpectTag(34)) goto parse_internet;
        break;
      }
      
      // optional bytes internet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_internet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_smoking_preferences;
        break;
      }
      
      // optional bytes smoking_preferences = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smoking_preferences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_smoking_preferences()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_meal_desc;
        break;
      }
      
      // optional bytes meal_desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meal_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_meal_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_room_size;
        break;
      }
      
      // optional bytes room_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_has_window;
        break;
      }
      
      // optional int32 has_window = 8 [default = 2];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_window_)));
          set_has_has_window();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_facility_list;
        break;
      }
      
      // repeated bytes facility_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facility_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_facility_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_facility_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes room_desc_text = 1;
  if (has_room_desc_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->room_desc_text(), output);
  }
  
  // repeated .price.BedGroup room_bed_group = 2;
  for (int i = 0; i < this->room_bed_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_bed_group(i), output);
  }
  
  // repeated .price.ImageLink image_link_list = 3;
  for (int i = 0; i < this->image_link_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image_link_list(i), output);
  }
  
  // optional bytes internet = 4;
  if (has_internet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->internet(), output);
  }
  
  // optional bytes smoking_preferences = 5;
  if (has_smoking_preferences()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->smoking_preferences(), output);
  }
  
  // optional bytes meal_desc = 6;
  if (has_meal_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->meal_desc(), output);
  }
  
  // optional bytes room_size = 7;
  if (has_room_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->room_size(), output);
  }
  
  // optional int32 has_window = 8 [default = 2];
  if (has_has_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->has_window(), output);
  }
  
  // repeated bytes facility_list = 10;
  for (int i = 0; i < this->facility_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->facility_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes room_desc_text = 1;
  if (has_room_desc_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->room_desc_text(), target);
  }
  
  // repeated .price.BedGroup room_bed_group = 2;
  for (int i = 0; i < this->room_bed_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_bed_group(i), target);
  }
  
  // repeated .price.ImageLink image_link_list = 3;
  for (int i = 0; i < this->image_link_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->image_link_list(i), target);
  }
  
  // optional bytes internet = 4;
  if (has_internet()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->internet(), target);
  }
  
  // optional bytes smoking_preferences = 5;
  if (has_smoking_preferences()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->smoking_preferences(), target);
  }
  
  // optional bytes meal_desc = 6;
  if (has_meal_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->meal_desc(), target);
  }
  
  // optional bytes room_size = 7;
  if (has_room_size()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->room_size(), target);
  }
  
  // optional int32 has_window = 8 [default = 2];
  if (has_has_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->has_window(), target);
  }
  
  // repeated bytes facility_list = 10;
  for (int i = 0; i < this->facility_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(10, this->facility_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes room_desc_text = 1;
    if (has_room_desc_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->room_desc_text());
    }
    
    // optional bytes internet = 4;
    if (has_internet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->internet());
    }
    
    // optional bytes smoking_preferences = 5;
    if (has_smoking_preferences()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->smoking_preferences());
    }
    
    // optional bytes meal_desc = 6;
    if (has_meal_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->meal_desc());
    }
    
    // optional bytes room_size = 7;
    if (has_room_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->room_size());
    }
    
    // optional int32 has_window = 8 [default = 2];
    if (has_has_window()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_window());
    }
    
  }
  // repeated .price.BedGroup room_bed_group = 2;
  total_size += 1 * this->room_bed_group_size();
  for (int i = 0; i < this->room_bed_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_bed_group(i));
  }
  
  // repeated .price.ImageLink image_link_list = 3;
  total_size += 1 * this->image_link_list_size();
  for (int i = 0; i < this->image_link_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image_link_list(i));
  }
  
  // repeated bytes facility_list = 10;
  total_size += 1 * this->facility_list_size();
  for (int i = 0; i < this->facility_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->facility_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomDesc::MergeFrom(const RoomDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_bed_group_.MergeFrom(from.room_bed_group_);
  image_link_list_.MergeFrom(from.image_link_list_);
  facility_list_.MergeFrom(from.facility_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_desc_text()) {
      set_room_desc_text(from.room_desc_text());
    }
    if (from.has_internet()) {
      set_internet(from.internet());
    }
    if (from.has_smoking_preferences()) {
      set_smoking_preferences(from.smoking_preferences());
    }
    if (from.has_meal_desc()) {
      set_meal_desc(from.meal_desc());
    }
    if (from.has_room_size()) {
      set_room_size(from.room_size());
    }
    if (from.has_has_window()) {
      set_has_window(from.has_window());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomDesc::CopyFrom(const RoomDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomDesc::IsInitialized() const {
  
  for (int i = 0; i < room_bed_group_size(); i++) {
    if (!this->room_bed_group(i).IsInitialized()) return false;
  }
  return true;
}

void RoomDesc::Swap(RoomDesc* other) {
  if (other != this) {
    std::swap(room_desc_text_, other->room_desc_text_);
    room_bed_group_.Swap(&other->room_bed_group_);
    image_link_list_.Swap(&other->image_link_list_);
    std::swap(internet_, other->internet_);
    std::swap(smoking_preferences_, other->smoking_preferences_);
    std::swap(meal_desc_, other->meal_desc_);
    std::swap(room_size_, other->room_size_);
    std::swap(has_window_, other->has_window_);
    facility_list_.Swap(&other->facility_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomDesc_descriptor_;
  metadata.reflection = RoomDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductFilter::kFilterCancellationTypeFieldNumber;
const int ProductFilter::kFilterPaytypeFieldNumber;
const int ProductFilter::kFilterInternetFieldNumber;
const int ProductFilter::kFilterBoardsFieldNumber;
const int ProductFilter::kFilterBedsFieldNumber;
#endif  // !_MSC_VER

ProductFilter::ProductFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductFilter::InitAsDefaultInstance() {
}

ProductFilter::ProductFilter(const ProductFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductFilter::SharedCtor() {
  _cached_size_ = 0;
  filter_cancellation_type_ = 0;
  filter_paytype_ = 0;
  filter_internet_ = 0;
  filter_boards_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductFilter::~ProductFilter() {
  SharedDtor();
}

void ProductFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProductFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductFilter_descriptor_;
}

const ProductFilter& ProductFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

ProductFilter* ProductFilter::default_instance_ = NULL;

ProductFilter* ProductFilter::New() const {
  return new ProductFilter;
}

void ProductFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filter_cancellation_type_ = 0;
    filter_paytype_ = 0;
    filter_internet_ = 0;
    filter_boards_ = 0;
  }
  filter_beds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 filter_cancellation_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_cancellation_type_)));
          set_has_filter_cancellation_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filter_paytype;
        break;
      }
      
      // optional int32 filter_paytype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_paytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_paytype_)));
          set_has_filter_paytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filter_internet;
        break;
      }
      
      // optional int32 filter_internet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_internet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_internet_)));
          set_has_filter_internet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_boards;
        break;
      }
      
      // optional int32 filter_boards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_boards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_boards_)));
          set_has_filter_boards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filter_beds;
        break;
      }
      
      // repeated int32 filter_beds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_beds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_filter_beds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_filter_beds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filter_beds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 filter_cancellation_type = 1;
  if (has_filter_cancellation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->filter_cancellation_type(), output);
  }
  
  // optional int32 filter_paytype = 2;
  if (has_filter_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->filter_paytype(), output);
  }
  
  // optional int32 filter_internet = 3;
  if (has_filter_internet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->filter_internet(), output);
  }
  
  // optional int32 filter_boards = 4;
  if (has_filter_boards()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->filter_boards(), output);
  }
  
  // repeated int32 filter_beds = 5;
  for (int i = 0; i < this->filter_beds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->filter_beds(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 filter_cancellation_type = 1;
  if (has_filter_cancellation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->filter_cancellation_type(), target);
  }
  
  // optional int32 filter_paytype = 2;
  if (has_filter_paytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->filter_paytype(), target);
  }
  
  // optional int32 filter_internet = 3;
  if (has_filter_internet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->filter_internet(), target);
  }
  
  // optional int32 filter_boards = 4;
  if (has_filter_boards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->filter_boards(), target);
  }
  
  // repeated int32 filter_beds = 5;
  for (int i = 0; i < this->filter_beds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->filter_beds(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductFilter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 filter_cancellation_type = 1;
    if (has_filter_cancellation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filter_cancellation_type());
    }
    
    // optional int32 filter_paytype = 2;
    if (has_filter_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filter_paytype());
    }
    
    // optional int32 filter_internet = 3;
    if (has_filter_internet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filter_internet());
    }
    
    // optional int32 filter_boards = 4;
    if (has_filter_boards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filter_boards());
    }
    
  }
  // repeated int32 filter_beds = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->filter_beds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->filter_beds(i));
    }
    total_size += 1 * this->filter_beds_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductFilter::MergeFrom(const ProductFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  filter_beds_.MergeFrom(from.filter_beds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter_cancellation_type()) {
      set_filter_cancellation_type(from.filter_cancellation_type());
    }
    if (from.has_filter_paytype()) {
      set_filter_paytype(from.filter_paytype());
    }
    if (from.has_filter_internet()) {
      set_filter_internet(from.filter_internet());
    }
    if (from.has_filter_boards()) {
      set_filter_boards(from.filter_boards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductFilter::CopyFrom(const ProductFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductFilter::IsInitialized() const {
  
  return true;
}

void ProductFilter::Swap(ProductFilter* other) {
  if (other != this) {
    std::swap(filter_cancellation_type_, other->filter_cancellation_type_);
    std::swap(filter_paytype_, other->filter_paytype_);
    std::swap(filter_internet_, other->filter_internet_);
    std::swap(filter_boards_, other->filter_boards_);
    filter_beds_.Swap(&other->filter_beds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductFilter_descriptor_;
  metadata.reflection = ProductFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductFilterStat::kFilterCancellationTypeFieldNumber;
const int ProductFilterStat::kFilterPaytypeFieldNumber;
const int ProductFilterStat::kFilterInternetFieldNumber;
const int ProductFilterStat::kFilterBoardsFieldNumber;
const int ProductFilterStat::kFilterBedsFieldNumber;
#endif  // !_MSC_VER

ProductFilterStat::ProductFilterStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductFilterStat::InitAsDefaultInstance() {
}

ProductFilterStat::ProductFilterStat(const ProductFilterStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductFilterStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductFilterStat::~ProductFilterStat() {
  SharedDtor();
}

void ProductFilterStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProductFilterStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductFilterStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductFilterStat_descriptor_;
}

const ProductFilterStat& ProductFilterStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

ProductFilterStat* ProductFilterStat::default_instance_ = NULL;

ProductFilterStat* ProductFilterStat::New() const {
  return new ProductFilterStat;
}

void ProductFilterStat::Clear() {
  filter_cancellation_type_.Clear();
  filter_paytype_.Clear();
  filter_internet_.Clear();
  filter_boards_.Clear();
  filter_beds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductFilterStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 filter_cancellation_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_cancellation_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_filter_cancellation_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_filter_cancellation_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_filter_cancellation_type;
        if (input->ExpectTag(16)) goto parse_filter_paytype;
        break;
      }
      
      // repeated int32 filter_paytype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_paytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_filter_paytype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_filter_paytype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filter_paytype;
        if (input->ExpectTag(24)) goto parse_filter_internet;
        break;
      }
      
      // repeated int32 filter_internet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_internet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_filter_internet())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_filter_internet())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filter_internet;
        if (input->ExpectTag(32)) goto parse_filter_boards;
        break;
      }
      
      // repeated int32 filter_boards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_boards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_filter_boards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_filter_boards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_boards;
        if (input->ExpectTag(40)) goto parse_filter_beds;
        break;
      }
      
      // repeated int32 filter_beds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_beds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_filter_beds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_filter_beds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filter_beds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductFilterStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 filter_cancellation_type = 1;
  for (int i = 0; i < this->filter_cancellation_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->filter_cancellation_type(i), output);
  }
  
  // repeated int32 filter_paytype = 2;
  for (int i = 0; i < this->filter_paytype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->filter_paytype(i), output);
  }
  
  // repeated int32 filter_internet = 3;
  for (int i = 0; i < this->filter_internet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->filter_internet(i), output);
  }
  
  // repeated int32 filter_boards = 4;
  for (int i = 0; i < this->filter_boards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->filter_boards(i), output);
  }
  
  // repeated int32 filter_beds = 5;
  for (int i = 0; i < this->filter_beds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->filter_beds(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductFilterStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 filter_cancellation_type = 1;
  for (int i = 0; i < this->filter_cancellation_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->filter_cancellation_type(i), target);
  }
  
  // repeated int32 filter_paytype = 2;
  for (int i = 0; i < this->filter_paytype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->filter_paytype(i), target);
  }
  
  // repeated int32 filter_internet = 3;
  for (int i = 0; i < this->filter_internet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->filter_internet(i), target);
  }
  
  // repeated int32 filter_boards = 4;
  for (int i = 0; i < this->filter_boards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->filter_boards(i), target);
  }
  
  // repeated int32 filter_beds = 5;
  for (int i = 0; i < this->filter_beds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->filter_beds(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductFilterStat::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 filter_cancellation_type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->filter_cancellation_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->filter_cancellation_type(i));
    }
    total_size += 1 * this->filter_cancellation_type_size() + data_size;
  }
  
  // repeated int32 filter_paytype = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->filter_paytype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->filter_paytype(i));
    }
    total_size += 1 * this->filter_paytype_size() + data_size;
  }
  
  // repeated int32 filter_internet = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->filter_internet_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->filter_internet(i));
    }
    total_size += 1 * this->filter_internet_size() + data_size;
  }
  
  // repeated int32 filter_boards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->filter_boards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->filter_boards(i));
    }
    total_size += 1 * this->filter_boards_size() + data_size;
  }
  
  // repeated int32 filter_beds = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->filter_beds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->filter_beds(i));
    }
    total_size += 1 * this->filter_beds_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductFilterStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductFilterStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductFilterStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductFilterStat::MergeFrom(const ProductFilterStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  filter_cancellation_type_.MergeFrom(from.filter_cancellation_type_);
  filter_paytype_.MergeFrom(from.filter_paytype_);
  filter_internet_.MergeFrom(from.filter_internet_);
  filter_boards_.MergeFrom(from.filter_boards_);
  filter_beds_.MergeFrom(from.filter_beds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductFilterStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductFilterStat::CopyFrom(const ProductFilterStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductFilterStat::IsInitialized() const {
  
  return true;
}

void ProductFilterStat::Swap(ProductFilterStat* other) {
  if (other != this) {
    filter_cancellation_type_.Swap(&other->filter_cancellation_type_);
    filter_paytype_.Swap(&other->filter_paytype_);
    filter_internet_.Swap(&other->filter_internet_);
    filter_boards_.Swap(&other->filter_boards_);
    filter_beds_.Swap(&other->filter_beds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductFilterStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductFilterStat_descriptor_;
  metadata.reflection = ProductFilterStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PriceInfo::kTotalPriceFieldNumber;
const int PriceInfo::kTotalPriceOriFieldNumber;
const int PriceInfo::kTotalRoomPriceFieldNumber;
const int PriceInfo::kExtraChargeFieldNumber;
const int PriceInfo::kDailyPriceListFieldNumber;
const int PriceInfo::kAveragePriceFieldNumber;
const int PriceInfo::kAverageRoomPriceFieldNumber;
const int PriceInfo::kAdditionPriceFieldNumber;
const int PriceInfo::kSortPriceFieldNumber;
#endif  // !_MSC_VER

PriceInfo::PriceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PriceInfo::InitAsDefaultInstance() {
  total_price_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
  total_price_ori_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
  total_room_price_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
  extra_charge_ = const_cast< ::price::ExtraCharge*>(&::price::ExtraCharge::default_instance());
  average_price_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
  average_room_price_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
  addition_price_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
  sort_price_ = const_cast< ::price::PriceItem*>(&::price::PriceItem::default_instance());
}

PriceInfo::PriceInfo(const PriceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PriceInfo::SharedCtor() {
  _cached_size_ = 0;
  total_price_ = NULL;
  total_price_ori_ = NULL;
  total_room_price_ = NULL;
  extra_charge_ = NULL;
  average_price_ = NULL;
  average_room_price_ = NULL;
  addition_price_ = NULL;
  sort_price_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceInfo::~PriceInfo() {
  SharedDtor();
}

void PriceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete total_price_;
    delete total_price_ori_;
    delete total_room_price_;
    delete extra_charge_;
    delete average_price_;
    delete average_room_price_;
    delete addition_price_;
    delete sort_price_;
  }
}

void PriceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceInfo_descriptor_;
}

const PriceInfo& PriceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

PriceInfo* PriceInfo::default_instance_ = NULL;

PriceInfo* PriceInfo::New() const {
  return new PriceInfo;
}

void PriceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_total_price()) {
      if (total_price_ != NULL) total_price_->::price::PriceItem::Clear();
    }
    if (has_total_price_ori()) {
      if (total_price_ori_ != NULL) total_price_ori_->::price::PriceItem::Clear();
    }
    if (has_total_room_price()) {
      if (total_room_price_ != NULL) total_room_price_->::price::PriceItem::Clear();
    }
    if (has_extra_charge()) {
      if (extra_charge_ != NULL) extra_charge_->::price::ExtraCharge::Clear();
    }
    if (has_average_price()) {
      if (average_price_ != NULL) average_price_->::price::PriceItem::Clear();
    }
    if (has_average_room_price()) {
      if (average_room_price_ != NULL) average_room_price_->::price::PriceItem::Clear();
    }
    if (has_addition_price()) {
      if (addition_price_ != NULL) addition_price_->::price::PriceItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sort_price()) {
      if (sort_price_ != NULL) sort_price_->::price::PriceItem::Clear();
    }
  }
  daily_price_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .price.PriceItem total_price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_total_price_ori;
        break;
      }
      
      // optional .price.PriceItem total_price_ori = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_price_ori:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_price_ori()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_total_room_price;
        break;
      }
      
      // optional .price.PriceItem total_room_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_room_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_room_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extra_charge;
        break;
      }
      
      // optional .price.ExtraCharge extra_charge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_charge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_charge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_daily_price_list;
        break;
      }
      
      // repeated .price.DailyPrice daily_price_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_price_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_price_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_daily_price_list;
        if (input->ExpectTag(50)) goto parse_average_price;
        break;
      }
      
      // optional .price.PriceItem average_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_average_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_average_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_average_room_price;
        break;
      }
      
      // optional .price.PriceItem average_room_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_average_room_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_average_room_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_addition_price;
        break;
      }
      
      // optional .price.PriceItem addition_price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addition_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addition_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sort_price;
        break;
      }
      
      // optional .price.PriceItem sort_price = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sort_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sort_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .price.PriceItem total_price = 1;
  if (has_total_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->total_price(), output);
  }
  
  // optional .price.PriceItem total_price_ori = 2;
  if (has_total_price_ori()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->total_price_ori(), output);
  }
  
  // optional .price.PriceItem total_room_price = 3;
  if (has_total_room_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->total_room_price(), output);
  }
  
  // optional .price.ExtraCharge extra_charge = 4;
  if (has_extra_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extra_charge(), output);
  }
  
  // repeated .price.DailyPrice daily_price_list = 5;
  for (int i = 0; i < this->daily_price_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->daily_price_list(i), output);
  }
  
  // optional .price.PriceItem average_price = 6;
  if (has_average_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->average_price(), output);
  }
  
  // optional .price.PriceItem average_room_price = 7;
  if (has_average_room_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->average_room_price(), output);
  }
  
  // optional .price.PriceItem addition_price = 8;
  if (has_addition_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->addition_price(), output);
  }
  
  // optional .price.PriceItem sort_price = 9;
  if (has_sort_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sort_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PriceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .price.PriceItem total_price = 1;
  if (has_total_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->total_price(), target);
  }
  
  // optional .price.PriceItem total_price_ori = 2;
  if (has_total_price_ori()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->total_price_ori(), target);
  }
  
  // optional .price.PriceItem total_room_price = 3;
  if (has_total_room_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->total_room_price(), target);
  }
  
  // optional .price.ExtraCharge extra_charge = 4;
  if (has_extra_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extra_charge(), target);
  }
  
  // repeated .price.DailyPrice daily_price_list = 5;
  for (int i = 0; i < this->daily_price_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->daily_price_list(i), target);
  }
  
  // optional .price.PriceItem average_price = 6;
  if (has_average_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->average_price(), target);
  }
  
  // optional .price.PriceItem average_room_price = 7;
  if (has_average_room_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->average_room_price(), target);
  }
  
  // optional .price.PriceItem addition_price = 8;
  if (has_addition_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->addition_price(), target);
  }
  
  // optional .price.PriceItem sort_price = 9;
  if (has_sort_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->sort_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PriceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .price.PriceItem total_price = 1;
    if (has_total_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_price());
    }
    
    // optional .price.PriceItem total_price_ori = 2;
    if (has_total_price_ori()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_price_ori());
    }
    
    // optional .price.PriceItem total_room_price = 3;
    if (has_total_room_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_room_price());
    }
    
    // optional .price.ExtraCharge extra_charge = 4;
    if (has_extra_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_charge());
    }
    
    // optional .price.PriceItem average_price = 6;
    if (has_average_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->average_price());
    }
    
    // optional .price.PriceItem average_room_price = 7;
    if (has_average_room_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->average_room_price());
    }
    
    // optional .price.PriceItem addition_price = 8;
    if (has_addition_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addition_price());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .price.PriceItem sort_price = 9;
    if (has_sort_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sort_price());
    }
    
  }
  // repeated .price.DailyPrice daily_price_list = 5;
  total_size += 1 * this->daily_price_list_size();
  for (int i = 0; i < this->daily_price_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_price_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceInfo::MergeFrom(const PriceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_price_list_.MergeFrom(from.daily_price_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_price()) {
      mutable_total_price()->::price::PriceItem::MergeFrom(from.total_price());
    }
    if (from.has_total_price_ori()) {
      mutable_total_price_ori()->::price::PriceItem::MergeFrom(from.total_price_ori());
    }
    if (from.has_total_room_price()) {
      mutable_total_room_price()->::price::PriceItem::MergeFrom(from.total_room_price());
    }
    if (from.has_extra_charge()) {
      mutable_extra_charge()->::price::ExtraCharge::MergeFrom(from.extra_charge());
    }
    if (from.has_average_price()) {
      mutable_average_price()->::price::PriceItem::MergeFrom(from.average_price());
    }
    if (from.has_average_room_price()) {
      mutable_average_room_price()->::price::PriceItem::MergeFrom(from.average_room_price());
    }
    if (from.has_addition_price()) {
      mutable_addition_price()->::price::PriceItem::MergeFrom(from.addition_price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sort_price()) {
      mutable_sort_price()->::price::PriceItem::MergeFrom(from.sort_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceInfo::CopyFrom(const PriceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceInfo::IsInitialized() const {
  
  if (has_total_price()) {
    if (!this->total_price().IsInitialized()) return false;
  }
  if (has_total_price_ori()) {
    if (!this->total_price_ori().IsInitialized()) return false;
  }
  if (has_total_room_price()) {
    if (!this->total_room_price().IsInitialized()) return false;
  }
  if (has_extra_charge()) {
    if (!this->extra_charge().IsInitialized()) return false;
  }
  for (int i = 0; i < daily_price_list_size(); i++) {
    if (!this->daily_price_list(i).IsInitialized()) return false;
  }
  if (has_average_price()) {
    if (!this->average_price().IsInitialized()) return false;
  }
  if (has_average_room_price()) {
    if (!this->average_room_price().IsInitialized()) return false;
  }
  if (has_addition_price()) {
    if (!this->addition_price().IsInitialized()) return false;
  }
  if (has_sort_price()) {
    if (!this->sort_price().IsInitialized()) return false;
  }
  return true;
}

void PriceInfo::Swap(PriceInfo* other) {
  if (other != this) {
    std::swap(total_price_, other->total_price_);
    std::swap(total_price_ori_, other->total_price_ori_);
    std::swap(total_room_price_, other->total_room_price_);
    std::swap(extra_charge_, other->extra_charge_);
    daily_price_list_.Swap(&other->daily_price_list_);
    std::swap(average_price_, other->average_price_);
    std::swap(average_room_price_, other->average_room_price_);
    std::swap(addition_price_, other->addition_price_);
    std::swap(sort_price_, other->sort_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceInfo_descriptor_;
  metadata.reflection = PriceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PersonHold::kMaxPersonNumFieldNumber;
const int PersonHold::kMaxAdultNumFieldNumber;
const int PersonHold::kMaxChildNumFieldNumber;
const int PersonHold::kMaxChildAgeFieldNumber;
const int PersonHold::kMinChildAloneAgeFieldNumber;
#endif  // !_MSC_VER

PersonHold::PersonHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PersonHold::InitAsDefaultInstance() {
}

PersonHold::PersonHold(const PersonHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PersonHold::SharedCtor() {
  _cached_size_ = 0;
  max_person_num_ = 0;
  max_adult_num_ = 0;
  max_child_num_ = 0;
  max_child_age_ = 0;
  min_child_alone_age_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersonHold::~PersonHold() {
  SharedDtor();
}

void PersonHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PersonHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonHold_descriptor_;
}

const PersonHold& PersonHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

PersonHold* PersonHold::default_instance_ = NULL;

PersonHold* PersonHold::New() const {
  return new PersonHold;
}

void PersonHold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_person_num_ = 0;
    max_adult_num_ = 0;
    max_child_num_ = 0;
    max_child_age_ = 0;
    min_child_alone_age_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersonHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 max_person_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_person_num_)));
          set_has_max_person_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_adult_num;
        break;
      }
      
      // optional int32 max_adult_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_adult_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_adult_num_)));
          set_has_max_adult_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_child_num;
        break;
      }
      
      // optional int32 max_child_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_child_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_child_num_)));
          set_has_max_child_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_child_age;
        break;
      }
      
      // optional int32 max_child_age = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_child_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_child_age_)));
          set_has_max_child_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_min_child_alone_age;
        break;
      }
      
      // optional int32 min_child_alone_age = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_child_alone_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_child_alone_age_)));
          set_has_min_child_alone_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PersonHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 max_person_num = 1;
  if (has_max_person_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_person_num(), output);
  }
  
  // optional int32 max_adult_num = 2;
  if (has_max_adult_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_adult_num(), output);
  }
  
  // optional int32 max_child_num = 3;
  if (has_max_child_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_child_num(), output);
  }
  
  // optional int32 max_child_age = 4;
  if (has_max_child_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_child_age(), output);
  }
  
  // optional int32 min_child_alone_age = 5;
  if (has_min_child_alone_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_child_alone_age(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PersonHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 max_person_num = 1;
  if (has_max_person_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_person_num(), target);
  }
  
  // optional int32 max_adult_num = 2;
  if (has_max_adult_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_adult_num(), target);
  }
  
  // optional int32 max_child_num = 3;
  if (has_max_child_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_child_num(), target);
  }
  
  // optional int32 max_child_age = 4;
  if (has_max_child_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_child_age(), target);
  }
  
  // optional int32 min_child_alone_age = 5;
  if (has_min_child_alone_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_child_alone_age(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PersonHold::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 max_person_num = 1;
    if (has_max_person_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_person_num());
    }
    
    // optional int32 max_adult_num = 2;
    if (has_max_adult_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_adult_num());
    }
    
    // optional int32 max_child_num = 3;
    if (has_max_child_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_child_num());
    }
    
    // optional int32 max_child_age = 4;
    if (has_max_child_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_child_age());
    }
    
    // optional int32 min_child_alone_age = 5;
    if (has_min_child_alone_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_child_alone_age());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersonHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersonHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersonHold::MergeFrom(const PersonHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_person_num()) {
      set_max_person_num(from.max_person_num());
    }
    if (from.has_max_adult_num()) {
      set_max_adult_num(from.max_adult_num());
    }
    if (from.has_max_child_num()) {
      set_max_child_num(from.max_child_num());
    }
    if (from.has_max_child_age()) {
      set_max_child_age(from.max_child_age());
    }
    if (from.has_min_child_alone_age()) {
      set_min_child_alone_age(from.min_child_alone_age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersonHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonHold::CopyFrom(const PersonHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonHold::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PersonHold::Swap(PersonHold* other) {
  if (other != this) {
    std::swap(max_person_num_, other->max_person_num_);
    std::swap(max_adult_num_, other->max_adult_num_);
    std::swap(max_child_num_, other->max_child_num_);
    std::swap(max_child_age_, other->max_child_age_);
    std::swap(min_child_alone_age_, other->min_child_alone_age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersonHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonHold_descriptor_;
  metadata.reflection = PersonHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Product::kElongPidFieldNumber;
const int Product::kOtaPidFieldNumber;
const int Product::kProductNameCnFieldNumber;
const int Product::kProductNameEnFieldNumber;
const int Product::kRateplanFieldNumber;
const int Product::kProductDescFieldNumber;
const int Product::kRoomNumFieldNumber;
const int Product::kPromotionInfoFieldNumber;
const int Product::kProductFilterFieldNumber;
const int Product::kAttachmentFieldNumber;
const int Product::kBookingPriceFieldNumber;
const int Product::kCostPriceFieldNumber;
const int Product::kOriginPriceFieldNumber;
const int Product::kSalePriceFieldNumber;
const int Product::kSourceOtaIdFieldNumber;
const int Product::kOtaSignFieldNumber;
const int Product::kTagFieldNumber;
#endif  // !_MSC_VER

Product::Product()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Product::InitAsDefaultInstance() {
  rateplan_ = const_cast< ::price::RatePlan*>(&::price::RatePlan::default_instance());
  product_desc_ = const_cast< ::price::ProductDesc*>(&::price::ProductDesc::default_instance());
  product_filter_ = const_cast< ::price::ProductFilter*>(&::price::ProductFilter::default_instance());
  booking_price_ = const_cast< ::price::PriceInfo*>(&::price::PriceInfo::default_instance());
  cost_price_ = const_cast< ::price::PriceInfo*>(&::price::PriceInfo::default_instance());
  origin_price_ = const_cast< ::price::PriceInfo*>(&::price::PriceInfo::default_instance());
  sale_price_ = const_cast< ::price::PriceInfo*>(&::price::PriceInfo::default_instance());
}

Product::Product(const Product& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Product::SharedCtor() {
  _cached_size_ = 0;
  elong_pid_ = GOOGLE_LONGLONG(0);
  ota_pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  product_name_cn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  product_name_en_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rateplan_ = NULL;
  product_desc_ = NULL;
  room_num_ = 0;
  product_filter_ = NULL;
  attachment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  booking_price_ = NULL;
  cost_price_ = NULL;
  origin_price_ = NULL;
  sale_price_ = NULL;
  source_ota_id_ = -1;
  ota_sign_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Product::~Product() {
  SharedDtor();
}

void Product::SharedDtor() {
  if (ota_pid_ != &::google::protobuf::internal::kEmptyString) {
    delete ota_pid_;
  }
  if (product_name_cn_ != &::google::protobuf::internal::kEmptyString) {
    delete product_name_cn_;
  }
  if (product_name_en_ != &::google::protobuf::internal::kEmptyString) {
    delete product_name_en_;
  }
  if (attachment_ != &::google::protobuf::internal::kEmptyString) {
    delete attachment_;
  }
  if (this != default_instance_) {
    delete rateplan_;
    delete product_desc_;
    delete product_filter_;
    delete booking_price_;
    delete cost_price_;
    delete origin_price_;
    delete sale_price_;
  }
}

void Product::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Product::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Product_descriptor_;
}

const Product& Product::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

Product* Product::default_instance_ = NULL;

Product* Product::New() const {
  return new Product;
}

void Product::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elong_pid_ = GOOGLE_LONGLONG(0);
    if (has_ota_pid()) {
      if (ota_pid_ != &::google::protobuf::internal::kEmptyString) {
        ota_pid_->clear();
      }
    }
    if (has_product_name_cn()) {
      if (product_name_cn_ != &::google::protobuf::internal::kEmptyString) {
        product_name_cn_->clear();
      }
    }
    if (has_product_name_en()) {
      if (product_name_en_ != &::google::protobuf::internal::kEmptyString) {
        product_name_en_->clear();
      }
    }
    if (has_rateplan()) {
      if (rateplan_ != NULL) rateplan_->::price::RatePlan::Clear();
    }
    if (has_product_desc()) {
      if (product_desc_ != NULL) product_desc_->::price::ProductDesc::Clear();
    }
    room_num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_product_filter()) {
      if (product_filter_ != NULL) product_filter_->::price::ProductFilter::Clear();
    }
    if (has_attachment()) {
      if (attachment_ != &::google::protobuf::internal::kEmptyString) {
        attachment_->clear();
      }
    }
    if (has_booking_price()) {
      if (booking_price_ != NULL) booking_price_->::price::PriceInfo::Clear();
    }
    if (has_cost_price()) {
      if (cost_price_ != NULL) cost_price_->::price::PriceInfo::Clear();
    }
    if (has_origin_price()) {
      if (origin_price_ != NULL) origin_price_->::price::PriceInfo::Clear();
    }
    if (has_sale_price()) {
      if (sale_price_ != NULL) sale_price_->::price::PriceInfo::Clear();
    }
    source_ota_id_ = -1;
    ota_sign_ = GOOGLE_LONGLONG(0);
  }
  promotion_info_.Clear();
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Product::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 elong_pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &elong_pid_)));
          set_has_elong_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ota_pid;
        break;
      }
      
      // optional string ota_pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ota_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ota_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ota_pid().data(), this->ota_pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_product_name_cn;
        break;
      }
      
      // optional bytes product_name_cn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_name_cn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_product_name_cn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_product_name_en;
        break;
      }
      
      // optional bytes product_name_en = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_product_name_en()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rateplan;
        break;
      }
      
      // optional .price.RatePlan rateplan = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rateplan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rateplan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_product_desc;
        break;
      }
      
      // optional .price.ProductDesc product_desc = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_room_num;
        break;
      }
      
      // required int32 room_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_num_)));
          set_has_room_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_promotion_info;
        break;
      }
      
      // repeated .price.PromotionInfo promotion_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promotion_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_promotion_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_promotion_info;
        if (input->ExpectTag(90)) goto parse_product_filter;
        break;
      }
      
      // optional .price.ProductFilter product_filter = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_attachment;
        break;
      }
      
      // optional string attachment = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attachment().data(), this->attachment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_booking_price;
        break;
      }
      
      // optional .price.PriceInfo booking_price = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_booking_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_booking_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_cost_price;
        break;
      }
      
      // optional .price.PriceInfo cost_price = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cost_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_origin_price;
        break;
      }
      
      // optional .price.PriceInfo origin_price = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_sale_price;
        break;
      }
      
      // optional .price.PriceInfo sale_price = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sale_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sale_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_tag;
        break;
      }
      
      // repeated .price.Tag tag = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_tag;
        if (input->ExpectTag(400)) goto parse_source_ota_id;
        break;
      }
      
      // optional int32 source_ota_id = 50 [default = -1];
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_ota_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_ota_id_)));
          set_has_source_ota_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_ota_sign;
        break;
      }
      
      // optional int64 ota_sign = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ota_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ota_sign_)));
          set_has_ota_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Product::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 elong_pid = 1;
  if (has_elong_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->elong_pid(), output);
  }
  
  // optional string ota_pid = 3;
  if (has_ota_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ota_pid().data(), this->ota_pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ota_pid(), output);
  }
  
  // optional bytes product_name_cn = 4;
  if (has_product_name_cn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->product_name_cn(), output);
  }
  
  // optional bytes product_name_en = 5;
  if (has_product_name_en()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->product_name_en(), output);
  }
  
  // optional .price.RatePlan rateplan = 6;
  if (has_rateplan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rateplan(), output);
  }
  
  // optional .price.ProductDesc product_desc = 8;
  if (has_product_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->product_desc(), output);
  }
  
  // required int32 room_num = 9;
  if (has_room_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->room_num(), output);
  }
  
  // repeated .price.PromotionInfo promotion_info = 10;
  for (int i = 0; i < this->promotion_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->promotion_info(i), output);
  }
  
  // optional .price.ProductFilter product_filter = 11;
  if (has_product_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->product_filter(), output);
  }
  
  // optional string attachment = 12;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachment().data(), this->attachment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->attachment(), output);
  }
  
  // optional .price.PriceInfo booking_price = 20;
  if (has_booking_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->booking_price(), output);
  }
  
  // optional .price.PriceInfo cost_price = 21;
  if (has_cost_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->cost_price(), output);
  }
  
  // optional .price.PriceInfo origin_price = 22;
  if (has_origin_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->origin_price(), output);
  }
  
  // optional .price.PriceInfo sale_price = 23;
  if (has_sale_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->sale_price(), output);
  }
  
  // repeated .price.Tag tag = 24;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->tag(i), output);
  }
  
  // optional int32 source_ota_id = 50 [default = -1];
  if (has_source_ota_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->source_ota_id(), output);
  }
  
  // optional int64 ota_sign = 51;
  if (has_ota_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(51, this->ota_sign(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Product::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 elong_pid = 1;
  if (has_elong_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->elong_pid(), target);
  }
  
  // optional string ota_pid = 3;
  if (has_ota_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ota_pid().data(), this->ota_pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ota_pid(), target);
  }
  
  // optional bytes product_name_cn = 4;
  if (has_product_name_cn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->product_name_cn(), target);
  }
  
  // optional bytes product_name_en = 5;
  if (has_product_name_en()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->product_name_en(), target);
  }
  
  // optional .price.RatePlan rateplan = 6;
  if (has_rateplan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rateplan(), target);
  }
  
  // optional .price.ProductDesc product_desc = 8;
  if (has_product_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->product_desc(), target);
  }
  
  // required int32 room_num = 9;
  if (has_room_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->room_num(), target);
  }
  
  // repeated .price.PromotionInfo promotion_info = 10;
  for (int i = 0; i < this->promotion_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->promotion_info(i), target);
  }
  
  // optional .price.ProductFilter product_filter = 11;
  if (has_product_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->product_filter(), target);
  }
  
  // optional string attachment = 12;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachment().data(), this->attachment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->attachment(), target);
  }
  
  // optional .price.PriceInfo booking_price = 20;
  if (has_booking_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->booking_price(), target);
  }
  
  // optional .price.PriceInfo cost_price = 21;
  if (has_cost_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->cost_price(), target);
  }
  
  // optional .price.PriceInfo origin_price = 22;
  if (has_origin_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->origin_price(), target);
  }
  
  // optional .price.PriceInfo sale_price = 23;
  if (has_sale_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->sale_price(), target);
  }
  
  // repeated .price.Tag tag = 24;
  for (int i = 0; i < this->tag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->tag(i), target);
  }
  
  // optional int32 source_ota_id = 50 [default = -1];
  if (has_source_ota_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->source_ota_id(), target);
  }
  
  // optional int64 ota_sign = 51;
  if (has_ota_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(51, this->ota_sign(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Product::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 elong_pid = 1;
    if (has_elong_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->elong_pid());
    }
    
    // optional string ota_pid = 3;
    if (has_ota_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ota_pid());
    }
    
    // optional bytes product_name_cn = 4;
    if (has_product_name_cn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->product_name_cn());
    }
    
    // optional bytes product_name_en = 5;
    if (has_product_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->product_name_en());
    }
    
    // optional .price.RatePlan rateplan = 6;
    if (has_rateplan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rateplan());
    }
    
    // optional .price.ProductDesc product_desc = 8;
    if (has_product_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product_desc());
    }
    
    // required int32 room_num = 9;
    if (has_room_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_num());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .price.ProductFilter product_filter = 11;
    if (has_product_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product_filter());
    }
    
    // optional string attachment = 12;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachment());
    }
    
    // optional .price.PriceInfo booking_price = 20;
    if (has_booking_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->booking_price());
    }
    
    // optional .price.PriceInfo cost_price = 21;
    if (has_cost_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cost_price());
    }
    
    // optional .price.PriceInfo origin_price = 22;
    if (has_origin_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin_price());
    }
    
    // optional .price.PriceInfo sale_price = 23;
    if (has_sale_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sale_price());
    }
    
    // optional int32 source_ota_id = 50 [default = -1];
    if (has_source_ota_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_ota_id());
    }
    
    // optional int64 ota_sign = 51;
    if (has_ota_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ota_sign());
    }
    
  }
  // repeated .price.PromotionInfo promotion_info = 10;
  total_size += 1 * this->promotion_info_size();
  for (int i = 0; i < this->promotion_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->promotion_info(i));
  }
  
  // repeated .price.Tag tag = 24;
  total_size += 2 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tag(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Product::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Product* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Product*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Product::MergeFrom(const Product& from) {
  GOOGLE_CHECK_NE(&from, this);
  promotion_info_.MergeFrom(from.promotion_info_);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elong_pid()) {
      set_elong_pid(from.elong_pid());
    }
    if (from.has_ota_pid()) {
      set_ota_pid(from.ota_pid());
    }
    if (from.has_product_name_cn()) {
      set_product_name_cn(from.product_name_cn());
    }
    if (from.has_product_name_en()) {
      set_product_name_en(from.product_name_en());
    }
    if (from.has_rateplan()) {
      mutable_rateplan()->::price::RatePlan::MergeFrom(from.rateplan());
    }
    if (from.has_product_desc()) {
      mutable_product_desc()->::price::ProductDesc::MergeFrom(from.product_desc());
    }
    if (from.has_room_num()) {
      set_room_num(from.room_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_product_filter()) {
      mutable_product_filter()->::price::ProductFilter::MergeFrom(from.product_filter());
    }
    if (from.has_attachment()) {
      set_attachment(from.attachment());
    }
    if (from.has_booking_price()) {
      mutable_booking_price()->::price::PriceInfo::MergeFrom(from.booking_price());
    }
    if (from.has_cost_price()) {
      mutable_cost_price()->::price::PriceInfo::MergeFrom(from.cost_price());
    }
    if (from.has_origin_price()) {
      mutable_origin_price()->::price::PriceInfo::MergeFrom(from.origin_price());
    }
    if (from.has_sale_price()) {
      mutable_sale_price()->::price::PriceInfo::MergeFrom(from.sale_price());
    }
    if (from.has_source_ota_id()) {
      set_source_ota_id(from.source_ota_id());
    }
    if (from.has_ota_sign()) {
      set_ota_sign(from.ota_sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Product::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Product::CopyFrom(const Product& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Product::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;
  
  if (has_rateplan()) {
    if (!this->rateplan().IsInitialized()) return false;
  }
  if (has_product_desc()) {
    if (!this->product_desc().IsInitialized()) return false;
  }
  if (has_booking_price()) {
    if (!this->booking_price().IsInitialized()) return false;
  }
  if (has_cost_price()) {
    if (!this->cost_price().IsInitialized()) return false;
  }
  if (has_origin_price()) {
    if (!this->origin_price().IsInitialized()) return false;
  }
  if (has_sale_price()) {
    if (!this->sale_price().IsInitialized()) return false;
  }
  return true;
}

void Product::Swap(Product* other) {
  if (other != this) {
    std::swap(elong_pid_, other->elong_pid_);
    std::swap(ota_pid_, other->ota_pid_);
    std::swap(product_name_cn_, other->product_name_cn_);
    std::swap(product_name_en_, other->product_name_en_);
    std::swap(rateplan_, other->rateplan_);
    std::swap(product_desc_, other->product_desc_);
    std::swap(room_num_, other->room_num_);
    promotion_info_.Swap(&other->promotion_info_);
    std::swap(product_filter_, other->product_filter_);
    std::swap(attachment_, other->attachment_);
    std::swap(booking_price_, other->booking_price_);
    std::swap(cost_price_, other->cost_price_);
    std::swap(origin_price_, other->origin_price_);
    std::swap(sale_price_, other->sale_price_);
    std::swap(source_ota_id_, other->source_ota_id_);
    std::swap(ota_sign_, other->ota_sign_);
    tag_.Swap(&other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Product::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Product_descriptor_;
  metadata.reflection = Product_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room::kMroomIdFieldNumber;
const int Room::kMroomNameCnFieldNumber;
const int Room::kMroomNameEnFieldNumber;
const int Room::kRoomIdFieldNumber;
const int Room::kRoomNameCnFieldNumber;
const int Room::kRoomNameEnFieldNumber;
const int Room::kRoomStatusFieldNumber;
const int Room::kAllotmentFieldNumber;
const int Room::kPersonHoldFieldNumber;
const int Room::kRoomDescFieldNumber;
const int Room::kAttachmentFieldNumber;
const int Room::kProductListFieldNumber;
const int Room::kBasePriceFieldNumber;
#endif  // !_MSC_VER

Room::Room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room::InitAsDefaultInstance() {
  person_hold_ = const_cast< ::price::PersonHold*>(&::price::PersonHold::default_instance());
  room_desc_ = const_cast< ::price::RoomDesc*>(&::price::RoomDesc::default_instance());
  base_price_ = const_cast< ::price::PriceInfo*>(&::price::PriceInfo::default_instance());
}

Room::Room(const Room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room::SharedCtor() {
  _cached_size_ = 0;
  mroom_id_ = GOOGLE_LONGLONG(0);
  mroom_name_cn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mroom_name_en_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_id_ = GOOGLE_LONGLONG(0);
  room_name_cn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_name_en_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_status_ = 0;
  allotment_ = -1;
  person_hold_ = NULL;
  room_desc_ = NULL;
  attachment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  base_price_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room::~Room() {
  SharedDtor();
}

void Room::SharedDtor() {
  if (mroom_name_cn_ != &::google::protobuf::internal::kEmptyString) {
    delete mroom_name_cn_;
  }
  if (mroom_name_en_ != &::google::protobuf::internal::kEmptyString) {
    delete mroom_name_en_;
  }
  if (room_name_cn_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_cn_;
  }
  if (room_name_en_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_en_;
  }
  if (attachment_ != &::google::protobuf::internal::kEmptyString) {
    delete attachment_;
  }
  if (this != default_instance_) {
    delete person_hold_;
    delete room_desc_;
    delete base_price_;
  }
}

void Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_descriptor_;
}

const Room& Room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

Room* Room::default_instance_ = NULL;

Room* Room::New() const {
  return new Room;
}

void Room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mroom_id_ = GOOGLE_LONGLONG(0);
    if (has_mroom_name_cn()) {
      if (mroom_name_cn_ != &::google::protobuf::internal::kEmptyString) {
        mroom_name_cn_->clear();
      }
    }
    if (has_mroom_name_en()) {
      if (mroom_name_en_ != &::google::protobuf::internal::kEmptyString) {
        mroom_name_en_->clear();
      }
    }
    room_id_ = GOOGLE_LONGLONG(0);
    if (has_room_name_cn()) {
      if (room_name_cn_ != &::google::protobuf::internal::kEmptyString) {
        room_name_cn_->clear();
      }
    }
    if (has_room_name_en()) {
      if (room_name_en_ != &::google::protobuf::internal::kEmptyString) {
        room_name_en_->clear();
      }
    }
    room_status_ = 0;
    allotment_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_person_hold()) {
      if (person_hold_ != NULL) person_hold_->::price::PersonHold::Clear();
    }
    if (has_room_desc()) {
      if (room_desc_ != NULL) room_desc_->::price::RoomDesc::Clear();
    }
    if (has_attachment()) {
      if (attachment_ != &::google::protobuf::internal::kEmptyString) {
        attachment_->clear();
      }
    }
    if (has_base_price()) {
      if (base_price_ != NULL) base_price_->::price::PriceInfo::Clear();
    }
  }
  product_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mroom_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mroom_id_)));
          set_has_mroom_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mroom_name_cn;
        break;
      }
      
      // optional bytes mroom_name_cn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mroom_name_cn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mroom_name_cn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mroom_name_en;
        break;
      }
      
      // optional bytes mroom_name_en = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mroom_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mroom_name_en()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }
      
      // required int64 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_room_name_cn;
        break;
      }
      
      // required bytes room_name_cn = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name_cn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_name_cn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_room_name_en;
        break;
      }
      
      // optional bytes room_name_en = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_name_en()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_room_status;
        break;
      }
      
      // required int32 room_status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_status_)));
          set_has_room_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_allotment;
        break;
      }
      
      // optional int32 allotment = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allotment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allotment_)));
          set_has_allotment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_person_hold;
        break;
      }
      
      // optional .price.PersonHold person_hold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_person_hold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_person_hold()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_room_desc;
        break;
      }
      
      // optional .price.RoomDesc room_desc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attachment;
        break;
      }
      
      // optional string attachment = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attachment().data(), this->attachment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_product_list;
        break;
      }
      
      // repeated .price.Product product_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_product_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_product_list;
        if (input->ExpectTag(170)) goto parse_base_price;
        break;
      }
      
      // optional .price.PriceInfo base_price = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mroom_id = 1;
  if (has_mroom_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mroom_id(), output);
  }
  
  // optional bytes mroom_name_cn = 2;
  if (has_mroom_name_cn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->mroom_name_cn(), output);
  }
  
  // optional bytes mroom_name_en = 3;
  if (has_mroom_name_en()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->mroom_name_en(), output);
  }
  
  // required int64 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->room_id(), output);
  }
  
  // required bytes room_name_cn = 5;
  if (has_room_name_cn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->room_name_cn(), output);
  }
  
  // optional bytes room_name_en = 6;
  if (has_room_name_en()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->room_name_en(), output);
  }
  
  // required int32 room_status = 7;
  if (has_room_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->room_status(), output);
  }
  
  // optional int32 allotment = 8 [default = -1];
  if (has_allotment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->allotment(), output);
  }
  
  // optional .price.PersonHold person_hold = 9;
  if (has_person_hold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->person_hold(), output);
  }
  
  // optional .price.RoomDesc room_desc = 10;
  if (has_room_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->room_desc(), output);
  }
  
  // optional string attachment = 11;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachment().data(), this->attachment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->attachment(), output);
  }
  
  // repeated .price.Product product_list = 12;
  for (int i = 0; i < this->product_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->product_list(i), output);
  }
  
  // optional .price.PriceInfo base_price = 21;
  if (has_base_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->base_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mroom_id = 1;
  if (has_mroom_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mroom_id(), target);
  }
  
  // optional bytes mroom_name_cn = 2;
  if (has_mroom_name_cn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mroom_name_cn(), target);
  }
  
  // optional bytes mroom_name_en = 3;
  if (has_mroom_name_en()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mroom_name_en(), target);
  }
  
  // required int64 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->room_id(), target);
  }
  
  // required bytes room_name_cn = 5;
  if (has_room_name_cn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->room_name_cn(), target);
  }
  
  // optional bytes room_name_en = 6;
  if (has_room_name_en()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->room_name_en(), target);
  }
  
  // required int32 room_status = 7;
  if (has_room_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->room_status(), target);
  }
  
  // optional int32 allotment = 8 [default = -1];
  if (has_allotment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->allotment(), target);
  }
  
  // optional .price.PersonHold person_hold = 9;
  if (has_person_hold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->person_hold(), target);
  }
  
  // optional .price.RoomDesc room_desc = 10;
  if (has_room_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->room_desc(), target);
  }
  
  // optional string attachment = 11;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachment().data(), this->attachment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->attachment(), target);
  }
  
  // repeated .price.Product product_list = 12;
  for (int i = 0; i < this->product_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->product_list(i), target);
  }
  
  // optional .price.PriceInfo base_price = 21;
  if (has_base_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->base_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mroom_id = 1;
    if (has_mroom_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mroom_id());
    }
    
    // optional bytes mroom_name_cn = 2;
    if (has_mroom_name_cn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mroom_name_cn());
    }
    
    // optional bytes mroom_name_en = 3;
    if (has_mroom_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mroom_name_en());
    }
    
    // required int64 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->room_id());
    }
    
    // required bytes room_name_cn = 5;
    if (has_room_name_cn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->room_name_cn());
    }
    
    // optional bytes room_name_en = 6;
    if (has_room_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->room_name_en());
    }
    
    // required int32 room_status = 7;
    if (has_room_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_status());
    }
    
    // optional int32 allotment = 8 [default = -1];
    if (has_allotment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allotment());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .price.PersonHold person_hold = 9;
    if (has_person_hold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->person_hold());
    }
    
    // optional .price.RoomDesc room_desc = 10;
    if (has_room_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_desc());
    }
    
    // optional string attachment = 11;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachment());
    }
    
    // optional .price.PriceInfo base_price = 21;
    if (has_base_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_price());
    }
    
  }
  // repeated .price.Product product_list = 12;
  total_size += 1 * this->product_list_size();
  for (int i = 0; i < this->product_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->product_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room::MergeFrom(const Room& from) {
  GOOGLE_CHECK_NE(&from, this);
  product_list_.MergeFrom(from.product_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mroom_id()) {
      set_mroom_id(from.mroom_id());
    }
    if (from.has_mroom_name_cn()) {
      set_mroom_name_cn(from.mroom_name_cn());
    }
    if (from.has_mroom_name_en()) {
      set_mroom_name_en(from.mroom_name_en());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_name_cn()) {
      set_room_name_cn(from.room_name_cn());
    }
    if (from.has_room_name_en()) {
      set_room_name_en(from.room_name_en());
    }
    if (from.has_room_status()) {
      set_room_status(from.room_status());
    }
    if (from.has_allotment()) {
      set_allotment(from.allotment());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_person_hold()) {
      mutable_person_hold()->::price::PersonHold::MergeFrom(from.person_hold());
    }
    if (from.has_room_desc()) {
      mutable_room_desc()->::price::RoomDesc::MergeFrom(from.room_desc());
    }
    if (from.has_attachment()) {
      set_attachment(from.attachment());
    }
    if (from.has_base_price()) {
      mutable_base_price()->::price::PriceInfo::MergeFrom(from.base_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room::CopyFrom(const Room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000058) != 0x00000058) return false;
  
  if (has_person_hold()) {
    if (!this->person_hold().IsInitialized()) return false;
  }
  if (has_room_desc()) {
    if (!this->room_desc().IsInitialized()) return false;
  }
  for (int i = 0; i < product_list_size(); i++) {
    if (!this->product_list(i).IsInitialized()) return false;
  }
  if (has_base_price()) {
    if (!this->base_price().IsInitialized()) return false;
  }
  return true;
}

void Room::Swap(Room* other) {
  if (other != this) {
    std::swap(mroom_id_, other->mroom_id_);
    std::swap(mroom_name_cn_, other->mroom_name_cn_);
    std::swap(mroom_name_en_, other->mroom_name_en_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_name_cn_, other->room_name_cn_);
    std::swap(room_name_en_, other->room_name_en_);
    std::swap(room_status_, other->room_status_);
    std::swap(allotment_, other->allotment_);
    std::swap(person_hold_, other->person_hold_);
    std::swap(room_desc_, other->room_desc_);
    std::swap(attachment_, other->attachment_);
    product_list_.Swap(&other->product_list_);
    std::swap(base_price_, other->base_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_descriptor_;
  metadata.reflection = Room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetailOta::kBaseHotelIdFieldNumber;
const int DetailOta::kCrawlTimeFieldNumber;
const int DetailOta::kBasePriceFieldNumber;
const int DetailOta::kPromotionInfoFieldNumber;
const int DetailOta::kOtaIdFieldNumber;
const int DetailOta::kOtaHotelIdFieldNumber;
const int DetailOta::kHotelStatusFieldNumber;
const int DetailOta::kAttachmentFieldNumber;
const int DetailOta::kRoomListFieldNumber;
#endif  // !_MSC_VER

DetailOta::DetailOta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetailOta::InitAsDefaultInstance() {
  base_price_ = const_cast< ::price::PriceInfo*>(&::price::PriceInfo::default_instance());
}

DetailOta::DetailOta(const DetailOta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetailOta::SharedCtor() {
  _cached_size_ = 0;
  base_hotel_id_ = 0;
  crawl_time_ = GOOGLE_LONGLONG(0);
  base_price_ = NULL;
  ota_id_ = 0;
  ota_hotel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hotel_status_ = 1;
  attachment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetailOta::~DetailOta() {
  SharedDtor();
}

void DetailOta::SharedDtor() {
  if (ota_hotel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ota_hotel_id_;
  }
  if (attachment_ != &::google::protobuf::internal::kEmptyString) {
    delete attachment_;
  }
  if (this != default_instance_) {
    delete base_price_;
  }
}

void DetailOta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetailOta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetailOta_descriptor_;
}

const DetailOta& DetailOta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

DetailOta* DetailOta::default_instance_ = NULL;

DetailOta* DetailOta::New() const {
  return new DetailOta;
}

void DetailOta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_hotel_id_ = 0;
    crawl_time_ = GOOGLE_LONGLONG(0);
    if (has_base_price()) {
      if (base_price_ != NULL) base_price_->::price::PriceInfo::Clear();
    }
    ota_id_ = 0;
    if (has_ota_hotel_id()) {
      if (ota_hotel_id_ != &::google::protobuf::internal::kEmptyString) {
        ota_hotel_id_->clear();
      }
    }
    hotel_status_ = 1;
    if (has_attachment()) {
      if (attachment_ != &::google::protobuf::internal::kEmptyString) {
        attachment_->clear();
      }
    }
  }
  promotion_info_.Clear();
  room_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetailOta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 base_hotel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_hotel_id_)));
          set_has_base_hotel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crawl_time;
        break;
      }
      
      // optional int64 crawl_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crawl_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crawl_time_)));
          set_has_crawl_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_base_price;
        break;
      }
      
      // optional .price.PriceInfo base_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_promotion_info;
        break;
      }
      
      // repeated .price.PromotionInfo promotion_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promotion_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_promotion_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_promotion_info;
        if (input->ExpectTag(88)) goto parse_ota_id;
        break;
      }
      
      // required int32 ota_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ota_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ota_id_)));
          set_has_ota_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ota_hotel_id;
        break;
      }
      
      // optional string ota_hotel_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ota_hotel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ota_hotel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ota_hotel_id().data(), this->ota_hotel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hotel_status;
        break;
      }
      
      // required .price.HotelStatus hotel_status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hotel_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (price::HotelStatus_IsValid(value)) {
            set_hotel_status(static_cast< price::HotelStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_attachment;
        break;
      }
      
      // optional string attachment = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attachment().data(), this->attachment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_room_list;
        break;
      }
      
      // repeated .price.Room room_list = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_room_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetailOta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 base_hotel_id = 1;
  if (has_base_hotel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->base_hotel_id(), output);
  }
  
  // optional int64 crawl_time = 2;
  if (has_crawl_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->crawl_time(), output);
  }
  
  // optional .price.PriceInfo base_price = 3;
  if (has_base_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base_price(), output);
  }
  
  // repeated .price.PromotionInfo promotion_info = 4;
  for (int i = 0; i < this->promotion_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->promotion_info(i), output);
  }
  
  // required int32 ota_id = 11;
  if (has_ota_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ota_id(), output);
  }
  
  // optional string ota_hotel_id = 12;
  if (has_ota_hotel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ota_hotel_id().data(), this->ota_hotel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->ota_hotel_id(), output);
  }
  
  // required .price.HotelStatus hotel_status = 13;
  if (has_hotel_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->hotel_status(), output);
  }
  
  // optional string attachment = 14;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachment().data(), this->attachment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->attachment(), output);
  }
  
  // repeated .price.Room room_list = 15;
  for (int i = 0; i < this->room_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->room_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetailOta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 base_hotel_id = 1;
  if (has_base_hotel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->base_hotel_id(), target);
  }
  
  // optional int64 crawl_time = 2;
  if (has_crawl_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->crawl_time(), target);
  }
  
  // optional .price.PriceInfo base_price = 3;
  if (has_base_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base_price(), target);
  }
  
  // repeated .price.PromotionInfo promotion_info = 4;
  for (int i = 0; i < this->promotion_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->promotion_info(i), target);
  }
  
  // required int32 ota_id = 11;
  if (has_ota_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ota_id(), target);
  }
  
  // optional string ota_hotel_id = 12;
  if (has_ota_hotel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ota_hotel_id().data(), this->ota_hotel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ota_hotel_id(), target);
  }
  
  // required .price.HotelStatus hotel_status = 13;
  if (has_hotel_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->hotel_status(), target);
  }
  
  // optional string attachment = 14;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachment().data(), this->attachment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->attachment(), target);
  }
  
  // repeated .price.Room room_list = 15;
  for (int i = 0; i < this->room_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->room_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetailOta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 base_hotel_id = 1;
    if (has_base_hotel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_hotel_id());
    }
    
    // optional int64 crawl_time = 2;
    if (has_crawl_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crawl_time());
    }
    
    // optional .price.PriceInfo base_price = 3;
    if (has_base_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_price());
    }
    
    // required int32 ota_id = 11;
    if (has_ota_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ota_id());
    }
    
    // optional string ota_hotel_id = 12;
    if (has_ota_hotel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ota_hotel_id());
    }
    
    // required .price.HotelStatus hotel_status = 13;
    if (has_hotel_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hotel_status());
    }
    
    // optional string attachment = 14;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachment());
    }
    
  }
  // repeated .price.PromotionInfo promotion_info = 4;
  total_size += 1 * this->promotion_info_size();
  for (int i = 0; i < this->promotion_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->promotion_info(i));
  }
  
  // repeated .price.Room room_list = 15;
  total_size += 1 * this->room_list_size();
  for (int i = 0; i < this->room_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetailOta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetailOta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetailOta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetailOta::MergeFrom(const DetailOta& from) {
  GOOGLE_CHECK_NE(&from, this);
  promotion_info_.MergeFrom(from.promotion_info_);
  room_list_.MergeFrom(from.room_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_hotel_id()) {
      set_base_hotel_id(from.base_hotel_id());
    }
    if (from.has_crawl_time()) {
      set_crawl_time(from.crawl_time());
    }
    if (from.has_base_price()) {
      mutable_base_price()->::price::PriceInfo::MergeFrom(from.base_price());
    }
    if (from.has_ota_id()) {
      set_ota_id(from.ota_id());
    }
    if (from.has_ota_hotel_id()) {
      set_ota_hotel_id(from.ota_hotel_id());
    }
    if (from.has_hotel_status()) {
      set_hotel_status(from.hotel_status());
    }
    if (from.has_attachment()) {
      set_attachment(from.attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetailOta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailOta::CopyFrom(const DetailOta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailOta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000051) != 0x00000051) return false;
  
  if (has_base_price()) {
    if (!this->base_price().IsInitialized()) return false;
  }
  for (int i = 0; i < room_list_size(); i++) {
    if (!this->room_list(i).IsInitialized()) return false;
  }
  return true;
}

void DetailOta::Swap(DetailOta* other) {
  if (other != this) {
    std::swap(base_hotel_id_, other->base_hotel_id_);
    std::swap(crawl_time_, other->crawl_time_);
    std::swap(base_price_, other->base_price_);
    promotion_info_.Swap(&other->promotion_info_);
    std::swap(ota_id_, other->ota_id_);
    std::swap(ota_hotel_id_, other->ota_hotel_id_);
    std::swap(hotel_status_, other->hotel_status_);
    std::swap(attachment_, other->attachment_);
    room_list_.Swap(&other->room_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetailOta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetailOta_descriptor_;
  metadata.reflection = DetailOta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetailHotel::kBaseHotelIdFieldNumber;
const int DetailHotel::kCrawlTimeFieldNumber;
const int DetailHotel::kPromotionInfoFieldNumber;
const int DetailHotel::kProductFilterStatFieldNumber;
const int DetailHotel::kBasePriceFieldNumber;
const int DetailHotel::kDetailOtaListFieldNumber;
const int DetailHotel::kTagFieldNumber;
#endif  // !_MSC_VER

DetailHotel::DetailHotel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetailHotel::InitAsDefaultInstance() {
  product_filter_stat_ = const_cast< ::price::ProductFilterStat*>(&::price::ProductFilterStat::default_instance());
  base_price_ = const_cast< ::price::PriceInfo*>(&::price::PriceInfo::default_instance());
}

DetailHotel::DetailHotel(const DetailHotel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetailHotel::SharedCtor() {
  _cached_size_ = 0;
  base_hotel_id_ = 0;
  crawl_time_ = GOOGLE_LONGLONG(0);
  product_filter_stat_ = NULL;
  base_price_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetailHotel::~DetailHotel() {
  SharedDtor();
}

void DetailHotel::SharedDtor() {
  if (this != default_instance_) {
    delete product_filter_stat_;
    delete base_price_;
  }
}

void DetailHotel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetailHotel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetailHotel_descriptor_;
}

const DetailHotel& DetailHotel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

DetailHotel* DetailHotel::default_instance_ = NULL;

DetailHotel* DetailHotel::New() const {
  return new DetailHotel;
}

void DetailHotel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_hotel_id_ = 0;
    crawl_time_ = GOOGLE_LONGLONG(0);
    if (has_product_filter_stat()) {
      if (product_filter_stat_ != NULL) product_filter_stat_->::price::ProductFilterStat::Clear();
    }
    if (has_base_price()) {
      if (base_price_ != NULL) base_price_->::price::PriceInfo::Clear();
    }
  }
  promotion_info_.Clear();
  detail_ota_list_.Clear();
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetailHotel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 base_hotel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_hotel_id_)));
          set_has_base_hotel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crawl_time;
        break;
      }
      
      // optional int64 crawl_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crawl_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crawl_time_)));
          set_has_crawl_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_base_price;
        break;
      }
      
      // optional .price.PriceInfo base_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_promotion_info;
        break;
      }
      
      // repeated .price.PromotionInfo promotion_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promotion_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_promotion_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_promotion_info;
        if (input->ExpectTag(42)) goto parse_product_filter_stat;
        break;
      }
      
      // optional .price.ProductFilterStat product_filter_stat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_filter_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product_filter_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_detail_ota_list;
        break;
      }
      
      // repeated .price.DetailOta detail_ota_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail_ota_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail_ota_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_detail_ota_list;
        if (input->ExpectTag(98)) goto parse_tag;
        break;
      }
      
      // repeated .price.Tag tag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tag;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetailHotel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 base_hotel_id = 1;
  if (has_base_hotel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->base_hotel_id(), output);
  }
  
  // optional int64 crawl_time = 2;
  if (has_crawl_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->crawl_time(), output);
  }
  
  // optional .price.PriceInfo base_price = 3;
  if (has_base_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base_price(), output);
  }
  
  // repeated .price.PromotionInfo promotion_info = 4;
  for (int i = 0; i < this->promotion_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->promotion_info(i), output);
  }
  
  // optional .price.ProductFilterStat product_filter_stat = 5;
  if (has_product_filter_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->product_filter_stat(), output);
  }
  
  // repeated .price.DetailOta detail_ota_list = 11;
  for (int i = 0; i < this->detail_ota_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->detail_ota_list(i), output);
  }
  
  // repeated .price.Tag tag = 12;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tag(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetailHotel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 base_hotel_id = 1;
  if (has_base_hotel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->base_hotel_id(), target);
  }
  
  // optional int64 crawl_time = 2;
  if (has_crawl_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->crawl_time(), target);
  }
  
  // optional .price.PriceInfo base_price = 3;
  if (has_base_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base_price(), target);
  }
  
  // repeated .price.PromotionInfo promotion_info = 4;
  for (int i = 0; i < this->promotion_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->promotion_info(i), target);
  }
  
  // optional .price.ProductFilterStat product_filter_stat = 5;
  if (has_product_filter_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->product_filter_stat(), target);
  }
  
  // repeated .price.DetailOta detail_ota_list = 11;
  for (int i = 0; i < this->detail_ota_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->detail_ota_list(i), target);
  }
  
  // repeated .price.Tag tag = 12;
  for (int i = 0; i < this->tag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->tag(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetailHotel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 base_hotel_id = 1;
    if (has_base_hotel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_hotel_id());
    }
    
    // optional int64 crawl_time = 2;
    if (has_crawl_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crawl_time());
    }
    
    // optional .price.ProductFilterStat product_filter_stat = 5;
    if (has_product_filter_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product_filter_stat());
    }
    
    // optional .price.PriceInfo base_price = 3;
    if (has_base_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_price());
    }
    
  }
  // repeated .price.PromotionInfo promotion_info = 4;
  total_size += 1 * this->promotion_info_size();
  for (int i = 0; i < this->promotion_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->promotion_info(i));
  }
  
  // repeated .price.DetailOta detail_ota_list = 11;
  total_size += 1 * this->detail_ota_list_size();
  for (int i = 0; i < this->detail_ota_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail_ota_list(i));
  }
  
  // repeated .price.Tag tag = 12;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tag(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetailHotel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetailHotel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetailHotel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetailHotel::MergeFrom(const DetailHotel& from) {
  GOOGLE_CHECK_NE(&from, this);
  promotion_info_.MergeFrom(from.promotion_info_);
  detail_ota_list_.MergeFrom(from.detail_ota_list_);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_hotel_id()) {
      set_base_hotel_id(from.base_hotel_id());
    }
    if (from.has_crawl_time()) {
      set_crawl_time(from.crawl_time());
    }
    if (from.has_product_filter_stat()) {
      mutable_product_filter_stat()->::price::ProductFilterStat::MergeFrom(from.product_filter_stat());
    }
    if (from.has_base_price()) {
      mutable_base_price()->::price::PriceInfo::MergeFrom(from.base_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetailHotel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailHotel::CopyFrom(const DetailHotel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailHotel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_base_price()) {
    if (!this->base_price().IsInitialized()) return false;
  }
  for (int i = 0; i < detail_ota_list_size(); i++) {
    if (!this->detail_ota_list(i).IsInitialized()) return false;
  }
  return true;
}

void DetailHotel::Swap(DetailHotel* other) {
  if (other != this) {
    std::swap(base_hotel_id_, other->base_hotel_id_);
    std::swap(crawl_time_, other->crawl_time_);
    promotion_info_.Swap(&other->promotion_info_);
    std::swap(product_filter_stat_, other->product_filter_stat_);
    std::swap(base_price_, other->base_price_);
    detail_ota_list_.Swap(&other->detail_ota_list_);
    tag_.Swap(&other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetailHotel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetailHotel_descriptor_;
  metadata.reflection = DetailHotel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListOta::kBaseHotelIdFieldNumber;
const int ListOta::kCrawlTimeFieldNumber;
const int ListOta::kOtaIdFieldNumber;
const int ListOta::kOriginPriceFieldNumber;
const int ListOta::kSalePriceFieldNumber;
const int ListOta::kPromotionInfoFieldNumber;
const int ListOta::kPayTypeFieldNumber;
#endif  // !_MSC_VER

ListOta::ListOta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListOta::InitAsDefaultInstance() {
  origin_price_ = const_cast< ::price::PriceInfo*>(&::price::PriceInfo::default_instance());
  sale_price_ = const_cast< ::price::PriceInfo*>(&::price::PriceInfo::default_instance());
}

ListOta::ListOta(const ListOta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListOta::SharedCtor() {
  _cached_size_ = 0;
  base_hotel_id_ = 0;
  crawl_time_ = GOOGLE_LONGLONG(0);
  ota_id_ = 0;
  origin_price_ = NULL;
  sale_price_ = NULL;
  pay_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListOta::~ListOta() {
  SharedDtor();
}

void ListOta::SharedDtor() {
  if (this != default_instance_) {
    delete origin_price_;
    delete sale_price_;
  }
}

void ListOta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListOta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListOta_descriptor_;
}

const ListOta& ListOta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

ListOta* ListOta::default_instance_ = NULL;

ListOta* ListOta::New() const {
  return new ListOta;
}

void ListOta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_hotel_id_ = 0;
    crawl_time_ = GOOGLE_LONGLONG(0);
    ota_id_ = 0;
    if (has_origin_price()) {
      if (origin_price_ != NULL) origin_price_->::price::PriceInfo::Clear();
    }
    if (has_sale_price()) {
      if (sale_price_ != NULL) sale_price_->::price::PriceInfo::Clear();
    }
    pay_type_ = 1;
  }
  promotion_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListOta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 base_hotel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_hotel_id_)));
          set_has_base_hotel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crawl_time;
        break;
      }
      
      // optional int64 crawl_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crawl_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crawl_time_)));
          set_has_crawl_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ota_id;
        break;
      }
      
      // required int32 ota_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ota_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ota_id_)));
          set_has_ota_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_origin_price;
        break;
      }
      
      // optional .price.PriceInfo origin_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sale_price;
        break;
      }
      
      // optional .price.PriceInfo sale_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sale_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sale_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_promotion_info;
        break;
      }
      
      // repeated .price.PromotionInfo promotion_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promotion_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_promotion_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_promotion_info;
        if (input->ExpectTag(56)) goto parse_pay_type;
        break;
      }
      
      // optional .price.PayType pay_type = 7 [default = PRE_PAY];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (price::PayType_IsValid(value)) {
            set_pay_type(static_cast< price::PayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListOta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 base_hotel_id = 1;
  if (has_base_hotel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->base_hotel_id(), output);
  }
  
  // optional int64 crawl_time = 2;
  if (has_crawl_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->crawl_time(), output);
  }
  
  // required int32 ota_id = 3;
  if (has_ota_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ota_id(), output);
  }
  
  // optional .price.PriceInfo origin_price = 4;
  if (has_origin_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->origin_price(), output);
  }
  
  // optional .price.PriceInfo sale_price = 5;
  if (has_sale_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sale_price(), output);
  }
  
  // repeated .price.PromotionInfo promotion_info = 6;
  for (int i = 0; i < this->promotion_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->promotion_info(i), output);
  }
  
  // optional .price.PayType pay_type = 7 [default = PRE_PAY];
  if (has_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pay_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListOta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 base_hotel_id = 1;
  if (has_base_hotel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->base_hotel_id(), target);
  }
  
  // optional int64 crawl_time = 2;
  if (has_crawl_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->crawl_time(), target);
  }
  
  // required int32 ota_id = 3;
  if (has_ota_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ota_id(), target);
  }
  
  // optional .price.PriceInfo origin_price = 4;
  if (has_origin_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->origin_price(), target);
  }
  
  // optional .price.PriceInfo sale_price = 5;
  if (has_sale_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sale_price(), target);
  }
  
  // repeated .price.PromotionInfo promotion_info = 6;
  for (int i = 0; i < this->promotion_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->promotion_info(i), target);
  }
  
  // optional .price.PayType pay_type = 7 [default = PRE_PAY];
  if (has_pay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->pay_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListOta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 base_hotel_id = 1;
    if (has_base_hotel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_hotel_id());
    }
    
    // optional int64 crawl_time = 2;
    if (has_crawl_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crawl_time());
    }
    
    // required int32 ota_id = 3;
    if (has_ota_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ota_id());
    }
    
    // optional .price.PriceInfo origin_price = 4;
    if (has_origin_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin_price());
    }
    
    // optional .price.PriceInfo sale_price = 5;
    if (has_sale_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sale_price());
    }
    
    // optional .price.PayType pay_type = 7 [default = PRE_PAY];
    if (has_pay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pay_type());
    }
    
  }
  // repeated .price.PromotionInfo promotion_info = 6;
  total_size += 1 * this->promotion_info_size();
  for (int i = 0; i < this->promotion_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->promotion_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListOta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListOta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListOta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListOta::MergeFrom(const ListOta& from) {
  GOOGLE_CHECK_NE(&from, this);
  promotion_info_.MergeFrom(from.promotion_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_hotel_id()) {
      set_base_hotel_id(from.base_hotel_id());
    }
    if (from.has_crawl_time()) {
      set_crawl_time(from.crawl_time());
    }
    if (from.has_ota_id()) {
      set_ota_id(from.ota_id());
    }
    if (from.has_origin_price()) {
      mutable_origin_price()->::price::PriceInfo::MergeFrom(from.origin_price());
    }
    if (from.has_sale_price()) {
      mutable_sale_price()->::price::PriceInfo::MergeFrom(from.sale_price());
    }
    if (from.has_pay_type()) {
      set_pay_type(from.pay_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListOta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOta::CopyFrom(const ListOta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_origin_price()) {
    if (!this->origin_price().IsInitialized()) return false;
  }
  if (has_sale_price()) {
    if (!this->sale_price().IsInitialized()) return false;
  }
  return true;
}

void ListOta::Swap(ListOta* other) {
  if (other != this) {
    std::swap(base_hotel_id_, other->base_hotel_id_);
    std::swap(crawl_time_, other->crawl_time_);
    std::swap(ota_id_, other->ota_id_);
    std::swap(origin_price_, other->origin_price_);
    std::swap(sale_price_, other->sale_price_);
    promotion_info_.Swap(&other->promotion_info_);
    std::swap(pay_type_, other->pay_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListOta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListOta_descriptor_;
  metadata.reflection = ListOta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListHotel::kBaseHotelIdFieldNumber;
const int ListHotel::kCrawlTimeFieldNumber;
const int ListHotel::kBookingStatusFieldNumber;
const int ListHotel::kPromotionInfoFieldNumber;
const int ListHotel::kListOtaListFieldNumber;
const int ListHotel::kMobileOnlyFieldNumber;
const int ListHotel::kTagFieldNumber;
#endif  // !_MSC_VER

ListHotel::ListHotel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListHotel::InitAsDefaultInstance() {
}

ListHotel::ListHotel(const ListHotel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListHotel::SharedCtor() {
  _cached_size_ = 0;
  base_hotel_id_ = 0;
  crawl_time_ = GOOGLE_LONGLONG(0);
  booking_status_ = 1;
  mobile_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListHotel::~ListHotel() {
  SharedDtor();
}

void ListHotel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListHotel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListHotel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListHotel_descriptor_;
}

const ListHotel& ListHotel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_price_5ftypes_2eproto();  return *default_instance_;
}

ListHotel* ListHotel::default_instance_ = NULL;

ListHotel* ListHotel::New() const {
  return new ListHotel;
}

void ListHotel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_hotel_id_ = 0;
    crawl_time_ = GOOGLE_LONGLONG(0);
    booking_status_ = 1;
    mobile_only_ = false;
  }
  promotion_info_.Clear();
  list_ota_list_.Clear();
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListHotel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 base_hotel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_hotel_id_)));
          set_has_base_hotel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crawl_time;
        break;
      }
      
      // optional int64 crawl_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crawl_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crawl_time_)));
          set_has_crawl_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_booking_status;
        break;
      }
      
      // optional .price.BookingStatus booking_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_booking_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (price::BookingStatus_IsValid(value)) {
            set_booking_status(static_cast< price::BookingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_promotion_info;
        break;
      }
      
      // repeated .price.PromotionInfo promotion_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promotion_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_promotion_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_promotion_info;
        if (input->ExpectTag(50)) goto parse_list_ota_list;
        break;
      }
      
      // repeated .price.ListOta list_ota_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_ota_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_ota_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_ota_list;
        if (input->ExpectTag(56)) goto parse_mobile_only;
        break;
      }
      
      // optional bool mobile_only = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mobile_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mobile_only_)));
          set_has_mobile_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tag;
        break;
      }
      
      // repeated .price.Tag tag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tag;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListHotel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 base_hotel_id = 1;
  if (has_base_hotel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->base_hotel_id(), output);
  }
  
  // optional int64 crawl_time = 2;
  if (has_crawl_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->crawl_time(), output);
  }
  
  // optional .price.BookingStatus booking_status = 4;
  if (has_booking_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->booking_status(), output);
  }
  
  // repeated .price.PromotionInfo promotion_info = 5;
  for (int i = 0; i < this->promotion_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->promotion_info(i), output);
  }
  
  // repeated .price.ListOta list_ota_list = 6;
  for (int i = 0; i < this->list_ota_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->list_ota_list(i), output);
  }
  
  // optional bool mobile_only = 7 [default = false];
  if (has_mobile_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->mobile_only(), output);
  }
  
  // repeated .price.Tag tag = 12;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tag(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListHotel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 base_hotel_id = 1;
  if (has_base_hotel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->base_hotel_id(), target);
  }
  
  // optional int64 crawl_time = 2;
  if (has_crawl_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->crawl_time(), target);
  }
  
  // optional .price.BookingStatus booking_status = 4;
  if (has_booking_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->booking_status(), target);
  }
  
  // repeated .price.PromotionInfo promotion_info = 5;
  for (int i = 0; i < this->promotion_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->promotion_info(i), target);
  }
  
  // repeated .price.ListOta list_ota_list = 6;
  for (int i = 0; i < this->list_ota_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->list_ota_list(i), target);
  }
  
  // optional bool mobile_only = 7 [default = false];
  if (has_mobile_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->mobile_only(), target);
  }
  
  // repeated .price.Tag tag = 12;
  for (int i = 0; i < this->tag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->tag(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListHotel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 base_hotel_id = 1;
    if (has_base_hotel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_hotel_id());
    }
    
    // optional int64 crawl_time = 2;
    if (has_crawl_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crawl_time());
    }
    
    // optional .price.BookingStatus booking_status = 4;
    if (has_booking_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->booking_status());
    }
    
    // optional bool mobile_only = 7 [default = false];
    if (has_mobile_only()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .price.PromotionInfo promotion_info = 5;
  total_size += 1 * this->promotion_info_size();
  for (int i = 0; i < this->promotion_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->promotion_info(i));
  }
  
  // repeated .price.ListOta list_ota_list = 6;
  total_size += 1 * this->list_ota_list_size();
  for (int i = 0; i < this->list_ota_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_ota_list(i));
  }
  
  // repeated .price.Tag tag = 12;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tag(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListHotel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListHotel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListHotel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListHotel::MergeFrom(const ListHotel& from) {
  GOOGLE_CHECK_NE(&from, this);
  promotion_info_.MergeFrom(from.promotion_info_);
  list_ota_list_.MergeFrom(from.list_ota_list_);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_hotel_id()) {
      set_base_hotel_id(from.base_hotel_id());
    }
    if (from.has_crawl_time()) {
      set_crawl_time(from.crawl_time());
    }
    if (from.has_booking_status()) {
      set_booking_status(from.booking_status());
    }
    if (from.has_mobile_only()) {
      set_mobile_only(from.mobile_only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListHotel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListHotel::CopyFrom(const ListHotel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListHotel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < list_ota_list_size(); i++) {
    if (!this->list_ota_list(i).IsInitialized()) return false;
  }
  return true;
}

void ListHotel::Swap(ListHotel* other) {
  if (other != this) {
    std::swap(base_hotel_id_, other->base_hotel_id_);
    std::swap(crawl_time_, other->crawl_time_);
    std::swap(booking_status_, other->booking_status_);
    promotion_info_.Swap(&other->promotion_info_);
    list_ota_list_.Swap(&other->list_ota_list_);
    std::swap(mobile_only_, other->mobile_only_);
    tag_.Swap(&other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListHotel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListHotel_descriptor_;
  metadata.reflection = ListHotel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace price

// @@protoc_insertion_point(global_scope)
